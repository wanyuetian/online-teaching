// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"online-teaching/internal/ent/coursecomment"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// CourseComment is the model entity for the CourseComment schema.
type CourseComment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 用户名
	Username string `json:"username,omitempty"`
	// 评论内容
	Comment string `json:"comment,omitempty"`
	// 序号
	Order int `json:"order,omitempty"`
	// 是否展示
	IsShow bool `json:"is_show,omitempty"`
	// IsDeleted holds the value of the "is_deleted" field.
	IsDeleted bool `json:"is_deleted,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CourseComment) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case coursecomment.FieldIsShow, coursecomment.FieldIsDeleted:
			values[i] = new(sql.NullBool)
		case coursecomment.FieldID, coursecomment.FieldOrder:
			values[i] = new(sql.NullInt64)
		case coursecomment.FieldUsername, coursecomment.FieldComment:
			values[i] = new(sql.NullString)
		case coursecomment.FieldCreatedAt, coursecomment.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CourseComment", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CourseComment fields.
func (cc *CourseComment) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case coursecomment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cc.ID = int(value.Int64)
		case coursecomment.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				cc.Username = value.String
			}
		case coursecomment.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				cc.Comment = value.String
			}
		case coursecomment.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				cc.Order = int(value.Int64)
			}
		case coursecomment.FieldIsShow:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_show", values[i])
			} else if value.Valid {
				cc.IsShow = value.Bool
			}
		case coursecomment.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				cc.IsDeleted = value.Bool
			}
		case coursecomment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cc.CreatedAt = value.Time
			}
		case coursecomment.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cc.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this CourseComment.
// Note that you need to call CourseComment.Unwrap() before calling this method if this CourseComment
// was returned from a transaction, and the transaction was committed or rolled back.
func (cc *CourseComment) Update() *CourseCommentUpdateOne {
	return (&CourseCommentClient{config: cc.config}).UpdateOne(cc)
}

// Unwrap unwraps the CourseComment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cc *CourseComment) Unwrap() *CourseComment {
	_tx, ok := cc.config.driver.(*txDriver)
	if !ok {
		panic("ent: CourseComment is not a transactional entity")
	}
	cc.config.driver = _tx.drv
	return cc
}

// String implements the fmt.Stringer.
func (cc *CourseComment) String() string {
	var builder strings.Builder
	builder.WriteString("CourseComment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cc.ID))
	builder.WriteString("username=")
	builder.WriteString(cc.Username)
	builder.WriteString(", ")
	builder.WriteString("comment=")
	builder.WriteString(cc.Comment)
	builder.WriteString(", ")
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", cc.Order))
	builder.WriteString(", ")
	builder.WriteString("is_show=")
	builder.WriteString(fmt.Sprintf("%v", cc.IsShow))
	builder.WriteString(", ")
	builder.WriteString("is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", cc.IsDeleted))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(cc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cc.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CourseComments is a parsable slice of CourseComment.
type CourseComments []*CourseComment

func (cc CourseComments) config(cfg config) {
	for _i := range cc {
		cc[_i].config = cfg
	}
}
