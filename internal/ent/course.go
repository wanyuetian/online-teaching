// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"online-teaching/internal/ent/course"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Course is the model entity for the Course schema.
type Course struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Desc holds the value of the "desc" field.
	Desc string `json:"desc,omitempty"`
	// BackgroundImage holds the value of the "background_image" field.
	BackgroundImage string `json:"background_image,omitempty"`
	// IsDeleted holds the value of the "is_deleted" field.
	IsDeleted bool `json:"is_deleted,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CourseQuery when eager-loading is set.
	Edges                 CourseEdges `json:"edges"`
	course_teacher_course *int
}

// CourseEdges holds the relations/edges for other nodes in the graph.
type CourseEdges struct {
	// CourseTeacher holds the value of the course_teacher edge.
	CourseTeacher []*CourseTeacher `json:"course_teacher,omitempty"`
	// CourseInfo holds the value of the course_info edge.
	CourseInfo []*CourseInfo `json:"course_info,omitempty"`
	// CourseChapter holds the value of the course_chapter edge.
	CourseChapter []*CourseChapter `json:"course_chapter,omitempty"`
	// CourseSection holds the value of the course_section edge.
	CourseSection []*CourseSection `json:"course_section,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// CourseTeacherOrErr returns the CourseTeacher value or an error if the edge
// was not loaded in eager-loading.
func (e CourseEdges) CourseTeacherOrErr() ([]*CourseTeacher, error) {
	if e.loadedTypes[0] {
		return e.CourseTeacher, nil
	}
	return nil, &NotLoadedError{edge: "course_teacher"}
}

// CourseInfoOrErr returns the CourseInfo value or an error if the edge
// was not loaded in eager-loading.
func (e CourseEdges) CourseInfoOrErr() ([]*CourseInfo, error) {
	if e.loadedTypes[1] {
		return e.CourseInfo, nil
	}
	return nil, &NotLoadedError{edge: "course_info"}
}

// CourseChapterOrErr returns the CourseChapter value or an error if the edge
// was not loaded in eager-loading.
func (e CourseEdges) CourseChapterOrErr() ([]*CourseChapter, error) {
	if e.loadedTypes[2] {
		return e.CourseChapter, nil
	}
	return nil, &NotLoadedError{edge: "course_chapter"}
}

// CourseSectionOrErr returns the CourseSection value or an error if the edge
// was not loaded in eager-loading.
func (e CourseEdges) CourseSectionOrErr() ([]*CourseSection, error) {
	if e.loadedTypes[3] {
		return e.CourseSection, nil
	}
	return nil, &NotLoadedError{edge: "course_section"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Course) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case course.FieldIsDeleted:
			values[i] = new(sql.NullBool)
		case course.FieldID:
			values[i] = new(sql.NullInt64)
		case course.FieldName, course.FieldDesc, course.FieldBackgroundImage:
			values[i] = new(sql.NullString)
		case course.FieldCreatedAt, course.FieldUpdatedAt, course.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case course.ForeignKeys[0]: // course_teacher_course
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Course", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Course fields.
func (c *Course) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case course.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case course.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case course.FieldDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value.Valid {
				c.Desc = value.String
			}
		case course.FieldBackgroundImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field background_image", values[i])
			} else if value.Valid {
				c.BackgroundImage = value.String
			}
		case course.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				c.IsDeleted = value.Bool
			}
		case course.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case course.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case course.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				c.DeletedAt = value.Time
			}
		case course.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field course_teacher_course", value)
			} else if value.Valid {
				c.course_teacher_course = new(int)
				*c.course_teacher_course = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryCourseTeacher queries the "course_teacher" edge of the Course entity.
func (c *Course) QueryCourseTeacher() *CourseTeacherQuery {
	return (&CourseClient{config: c.config}).QueryCourseTeacher(c)
}

// QueryCourseInfo queries the "course_info" edge of the Course entity.
func (c *Course) QueryCourseInfo() *CourseInfoQuery {
	return (&CourseClient{config: c.config}).QueryCourseInfo(c)
}

// QueryCourseChapter queries the "course_chapter" edge of the Course entity.
func (c *Course) QueryCourseChapter() *CourseChapterQuery {
	return (&CourseClient{config: c.config}).QueryCourseChapter(c)
}

// QueryCourseSection queries the "course_section" edge of the Course entity.
func (c *Course) QueryCourseSection() *CourseSectionQuery {
	return (&CourseClient{config: c.config}).QueryCourseSection(c)
}

// Update returns a builder for updating this Course.
// Note that you need to call Course.Unwrap() before calling this method if this Course
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Course) Update() *CourseUpdateOne {
	return (&CourseClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Course entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Course) Unwrap() *Course {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Course is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Course) String() string {
	var builder strings.Builder
	builder.WriteString("Course(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("desc=")
	builder.WriteString(c.Desc)
	builder.WriteString(", ")
	builder.WriteString("background_image=")
	builder.WriteString(c.BackgroundImage)
	builder.WriteString(", ")
	builder.WriteString("is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", c.IsDeleted))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(c.DeletedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Courses is a parsable slice of Course.
type Courses []*Course

func (c Courses) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
