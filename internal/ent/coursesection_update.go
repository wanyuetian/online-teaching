// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"online-teaching/internal/ent/coursesection"
	"online-teaching/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CourseSectionUpdate is the builder for updating CourseSection entities.
type CourseSectionUpdate struct {
	config
	hooks    []Hook
	mutation *CourseSectionMutation
}

// Where appends a list predicates to the CourseSectionUpdate builder.
func (csu *CourseSectionUpdate) Where(ps ...predicate.CourseSection) *CourseSectionUpdate {
	csu.mutation.Where(ps...)
	return csu
}

// SetTitle sets the "title" field.
func (csu *CourseSectionUpdate) SetTitle(s string) *CourseSectionUpdate {
	csu.mutation.SetTitle(s)
	return csu
}

// SetType sets the "type" field.
func (csu *CourseSectionUpdate) SetType(s string) *CourseSectionUpdate {
	csu.mutation.SetType(s)
	return csu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (csu *CourseSectionUpdate) SetNillableType(s *string) *CourseSectionUpdate {
	if s != nil {
		csu.SetType(*s)
	}
	return csu
}

// SetVideo sets the "video" field.
func (csu *CourseSectionUpdate) SetVideo(s string) *CourseSectionUpdate {
	csu.mutation.SetVideo(s)
	return csu
}

// SetIsDeleted sets the "is_deleted" field.
func (csu *CourseSectionUpdate) SetIsDeleted(b bool) *CourseSectionUpdate {
	csu.mutation.SetIsDeleted(b)
	return csu
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (csu *CourseSectionUpdate) SetNillableIsDeleted(b *bool) *CourseSectionUpdate {
	if b != nil {
		csu.SetIsDeleted(*b)
	}
	return csu
}

// SetCreatedAt sets the "created_at" field.
func (csu *CourseSectionUpdate) SetCreatedAt(t time.Time) *CourseSectionUpdate {
	csu.mutation.SetCreatedAt(t)
	return csu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (csu *CourseSectionUpdate) SetNillableCreatedAt(t *time.Time) *CourseSectionUpdate {
	if t != nil {
		csu.SetCreatedAt(*t)
	}
	return csu
}

// SetUpdatedAt sets the "updated_at" field.
func (csu *CourseSectionUpdate) SetUpdatedAt(t time.Time) *CourseSectionUpdate {
	csu.mutation.SetUpdatedAt(t)
	return csu
}

// Mutation returns the CourseSectionMutation object of the builder.
func (csu *CourseSectionUpdate) Mutation() *CourseSectionMutation {
	return csu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (csu *CourseSectionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	csu.defaults()
	if len(csu.hooks) == 0 {
		if err = csu.check(); err != nil {
			return 0, err
		}
		affected, err = csu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CourseSectionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = csu.check(); err != nil {
				return 0, err
			}
			csu.mutation = mutation
			affected, err = csu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(csu.hooks) - 1; i >= 0; i-- {
			if csu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = csu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, csu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (csu *CourseSectionUpdate) SaveX(ctx context.Context) int {
	affected, err := csu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (csu *CourseSectionUpdate) Exec(ctx context.Context) error {
	_, err := csu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csu *CourseSectionUpdate) ExecX(ctx context.Context) {
	if err := csu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csu *CourseSectionUpdate) defaults() {
	if _, ok := csu.mutation.UpdatedAt(); !ok {
		v := coursesection.UpdateDefaultUpdatedAt()
		csu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csu *CourseSectionUpdate) check() error {
	if v, ok := csu.mutation.Title(); ok {
		if err := coursesection.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "CourseSection.title": %w`, err)}
		}
	}
	return nil
}

func (csu *CourseSectionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   coursesection.Table,
			Columns: coursesection.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: coursesection.FieldID,
			},
		},
	}
	if ps := csu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coursesection.FieldTitle,
		})
	}
	if value, ok := csu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coursesection.FieldType,
		})
	}
	if value, ok := csu.mutation.Video(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coursesection.FieldVideo,
		})
	}
	if value, ok := csu.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: coursesection.FieldIsDeleted,
		})
	}
	if value, ok := csu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: coursesection.FieldCreatedAt,
		})
	}
	if value, ok := csu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: coursesection.FieldUpdatedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, csu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coursesection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CourseSectionUpdateOne is the builder for updating a single CourseSection entity.
type CourseSectionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CourseSectionMutation
}

// SetTitle sets the "title" field.
func (csuo *CourseSectionUpdateOne) SetTitle(s string) *CourseSectionUpdateOne {
	csuo.mutation.SetTitle(s)
	return csuo
}

// SetType sets the "type" field.
func (csuo *CourseSectionUpdateOne) SetType(s string) *CourseSectionUpdateOne {
	csuo.mutation.SetType(s)
	return csuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (csuo *CourseSectionUpdateOne) SetNillableType(s *string) *CourseSectionUpdateOne {
	if s != nil {
		csuo.SetType(*s)
	}
	return csuo
}

// SetVideo sets the "video" field.
func (csuo *CourseSectionUpdateOne) SetVideo(s string) *CourseSectionUpdateOne {
	csuo.mutation.SetVideo(s)
	return csuo
}

// SetIsDeleted sets the "is_deleted" field.
func (csuo *CourseSectionUpdateOne) SetIsDeleted(b bool) *CourseSectionUpdateOne {
	csuo.mutation.SetIsDeleted(b)
	return csuo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (csuo *CourseSectionUpdateOne) SetNillableIsDeleted(b *bool) *CourseSectionUpdateOne {
	if b != nil {
		csuo.SetIsDeleted(*b)
	}
	return csuo
}

// SetCreatedAt sets the "created_at" field.
func (csuo *CourseSectionUpdateOne) SetCreatedAt(t time.Time) *CourseSectionUpdateOne {
	csuo.mutation.SetCreatedAt(t)
	return csuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (csuo *CourseSectionUpdateOne) SetNillableCreatedAt(t *time.Time) *CourseSectionUpdateOne {
	if t != nil {
		csuo.SetCreatedAt(*t)
	}
	return csuo
}

// SetUpdatedAt sets the "updated_at" field.
func (csuo *CourseSectionUpdateOne) SetUpdatedAt(t time.Time) *CourseSectionUpdateOne {
	csuo.mutation.SetUpdatedAt(t)
	return csuo
}

// Mutation returns the CourseSectionMutation object of the builder.
func (csuo *CourseSectionUpdateOne) Mutation() *CourseSectionMutation {
	return csuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (csuo *CourseSectionUpdateOne) Select(field string, fields ...string) *CourseSectionUpdateOne {
	csuo.fields = append([]string{field}, fields...)
	return csuo
}

// Save executes the query and returns the updated CourseSection entity.
func (csuo *CourseSectionUpdateOne) Save(ctx context.Context) (*CourseSection, error) {
	var (
		err  error
		node *CourseSection
	)
	csuo.defaults()
	if len(csuo.hooks) == 0 {
		if err = csuo.check(); err != nil {
			return nil, err
		}
		node, err = csuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CourseSectionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = csuo.check(); err != nil {
				return nil, err
			}
			csuo.mutation = mutation
			node, err = csuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(csuo.hooks) - 1; i >= 0; i-- {
			if csuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = csuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, csuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CourseSection)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CourseSectionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (csuo *CourseSectionUpdateOne) SaveX(ctx context.Context) *CourseSection {
	node, err := csuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (csuo *CourseSectionUpdateOne) Exec(ctx context.Context) error {
	_, err := csuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csuo *CourseSectionUpdateOne) ExecX(ctx context.Context) {
	if err := csuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csuo *CourseSectionUpdateOne) defaults() {
	if _, ok := csuo.mutation.UpdatedAt(); !ok {
		v := coursesection.UpdateDefaultUpdatedAt()
		csuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csuo *CourseSectionUpdateOne) check() error {
	if v, ok := csuo.mutation.Title(); ok {
		if err := coursesection.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "CourseSection.title": %w`, err)}
		}
	}
	return nil
}

func (csuo *CourseSectionUpdateOne) sqlSave(ctx context.Context) (_node *CourseSection, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   coursesection.Table,
			Columns: coursesection.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: coursesection.FieldID,
			},
		},
	}
	id, ok := csuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CourseSection.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := csuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, coursesection.FieldID)
		for _, f := range fields {
			if !coursesection.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != coursesection.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := csuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coursesection.FieldTitle,
		})
	}
	if value, ok := csuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coursesection.FieldType,
		})
	}
	if value, ok := csuo.mutation.Video(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coursesection.FieldVideo,
		})
	}
	if value, ok := csuo.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: coursesection.FieldIsDeleted,
		})
	}
	if value, ok := csuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: coursesection.FieldCreatedAt,
		})
	}
	if value, ok := csuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: coursesection.FieldUpdatedAt,
		})
	}
	_node = &CourseSection{config: csuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, csuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coursesection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
