// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"online-teaching/internal/ent/migrate"

	"online-teaching/internal/ent/course"
	"online-teaching/internal/ent/coursechapter"
	"online-teaching/internal/ent/courseinfo"
	"online-teaching/internal/ent/coursesection"
	"online-teaching/internal/ent/courseteacher"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Course is the client for interacting with the Course builders.
	Course *CourseClient
	// CourseChapter is the client for interacting with the CourseChapter builders.
	CourseChapter *CourseChapterClient
	// CourseInfo is the client for interacting with the CourseInfo builders.
	CourseInfo *CourseInfoClient
	// CourseSection is the client for interacting with the CourseSection builders.
	CourseSection *CourseSectionClient
	// CourseTeacher is the client for interacting with the CourseTeacher builders.
	CourseTeacher *CourseTeacherClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Course = NewCourseClient(c.config)
	c.CourseChapter = NewCourseChapterClient(c.config)
	c.CourseInfo = NewCourseInfoClient(c.config)
	c.CourseSection = NewCourseSectionClient(c.config)
	c.CourseTeacher = NewCourseTeacherClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Course:        NewCourseClient(cfg),
		CourseChapter: NewCourseChapterClient(cfg),
		CourseInfo:    NewCourseInfoClient(cfg),
		CourseSection: NewCourseSectionClient(cfg),
		CourseTeacher: NewCourseTeacherClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Course:        NewCourseClient(cfg),
		CourseChapter: NewCourseChapterClient(cfg),
		CourseInfo:    NewCourseInfoClient(cfg),
		CourseSection: NewCourseSectionClient(cfg),
		CourseTeacher: NewCourseTeacherClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Course.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Course.Use(hooks...)
	c.CourseChapter.Use(hooks...)
	c.CourseInfo.Use(hooks...)
	c.CourseSection.Use(hooks...)
	c.CourseTeacher.Use(hooks...)
}

// CourseClient is a client for the Course schema.
type CourseClient struct {
	config
}

// NewCourseClient returns a client for the Course from the given config.
func NewCourseClient(c config) *CourseClient {
	return &CourseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `course.Hooks(f(g(h())))`.
func (c *CourseClient) Use(hooks ...Hook) {
	c.hooks.Course = append(c.hooks.Course, hooks...)
}

// Create returns a builder for creating a Course entity.
func (c *CourseClient) Create() *CourseCreate {
	mutation := newCourseMutation(c.config, OpCreate)
	return &CourseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Course entities.
func (c *CourseClient) CreateBulk(builders ...*CourseCreate) *CourseCreateBulk {
	return &CourseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Course.
func (c *CourseClient) Update() *CourseUpdate {
	mutation := newCourseMutation(c.config, OpUpdate)
	return &CourseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CourseClient) UpdateOne(co *Course) *CourseUpdateOne {
	mutation := newCourseMutation(c.config, OpUpdateOne, withCourse(co))
	return &CourseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CourseClient) UpdateOneID(id int) *CourseUpdateOne {
	mutation := newCourseMutation(c.config, OpUpdateOne, withCourseID(id))
	return &CourseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Course.
func (c *CourseClient) Delete() *CourseDelete {
	mutation := newCourseMutation(c.config, OpDelete)
	return &CourseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CourseClient) DeleteOne(co *Course) *CourseDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *CourseClient) DeleteOneID(id int) *CourseDeleteOne {
	builder := c.Delete().Where(course.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CourseDeleteOne{builder}
}

// Query returns a query builder for Course.
func (c *CourseClient) Query() *CourseQuery {
	return &CourseQuery{
		config: c.config,
	}
}

// Get returns a Course entity by its id.
func (c *CourseClient) Get(ctx context.Context, id int) (*Course, error) {
	return c.Query().Where(course.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CourseClient) GetX(ctx context.Context, id int) *Course {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCourseTeacher queries the course_teacher edge of a Course.
func (c *CourseClient) QueryCourseTeacher(co *Course) *CourseTeacherQuery {
	query := &CourseTeacherQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(course.Table, course.FieldID, id),
			sqlgraph.To(courseteacher.Table, courseteacher.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, course.CourseTeacherTable, course.CourseTeacherColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCourseInfo queries the course_info edge of a Course.
func (c *CourseClient) QueryCourseInfo(co *Course) *CourseInfoQuery {
	query := &CourseInfoQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(course.Table, course.FieldID, id),
			sqlgraph.To(courseinfo.Table, courseinfo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, course.CourseInfoTable, course.CourseInfoColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCourseChapter queries the course_chapter edge of a Course.
func (c *CourseClient) QueryCourseChapter(co *Course) *CourseChapterQuery {
	query := &CourseChapterQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(course.Table, course.FieldID, id),
			sqlgraph.To(coursechapter.Table, coursechapter.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, course.CourseChapterTable, course.CourseChapterColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCourseSection queries the course_section edge of a Course.
func (c *CourseClient) QueryCourseSection(co *Course) *CourseSectionQuery {
	query := &CourseSectionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(course.Table, course.FieldID, id),
			sqlgraph.To(coursesection.Table, coursesection.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, course.CourseSectionTable, course.CourseSectionColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CourseClient) Hooks() []Hook {
	return c.hooks.Course
}

// CourseChapterClient is a client for the CourseChapter schema.
type CourseChapterClient struct {
	config
}

// NewCourseChapterClient returns a client for the CourseChapter from the given config.
func NewCourseChapterClient(c config) *CourseChapterClient {
	return &CourseChapterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `coursechapter.Hooks(f(g(h())))`.
func (c *CourseChapterClient) Use(hooks ...Hook) {
	c.hooks.CourseChapter = append(c.hooks.CourseChapter, hooks...)
}

// Create returns a builder for creating a CourseChapter entity.
func (c *CourseChapterClient) Create() *CourseChapterCreate {
	mutation := newCourseChapterMutation(c.config, OpCreate)
	return &CourseChapterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CourseChapter entities.
func (c *CourseChapterClient) CreateBulk(builders ...*CourseChapterCreate) *CourseChapterCreateBulk {
	return &CourseChapterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CourseChapter.
func (c *CourseChapterClient) Update() *CourseChapterUpdate {
	mutation := newCourseChapterMutation(c.config, OpUpdate)
	return &CourseChapterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CourseChapterClient) UpdateOne(cc *CourseChapter) *CourseChapterUpdateOne {
	mutation := newCourseChapterMutation(c.config, OpUpdateOne, withCourseChapter(cc))
	return &CourseChapterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CourseChapterClient) UpdateOneID(id int) *CourseChapterUpdateOne {
	mutation := newCourseChapterMutation(c.config, OpUpdateOne, withCourseChapterID(id))
	return &CourseChapterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CourseChapter.
func (c *CourseChapterClient) Delete() *CourseChapterDelete {
	mutation := newCourseChapterMutation(c.config, OpDelete)
	return &CourseChapterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CourseChapterClient) DeleteOne(cc *CourseChapter) *CourseChapterDeleteOne {
	return c.DeleteOneID(cc.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *CourseChapterClient) DeleteOneID(id int) *CourseChapterDeleteOne {
	builder := c.Delete().Where(coursechapter.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CourseChapterDeleteOne{builder}
}

// Query returns a query builder for CourseChapter.
func (c *CourseChapterClient) Query() *CourseChapterQuery {
	return &CourseChapterQuery{
		config: c.config,
	}
}

// Get returns a CourseChapter entity by its id.
func (c *CourseChapterClient) Get(ctx context.Context, id int) (*CourseChapter, error) {
	return c.Query().Where(coursechapter.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CourseChapterClient) GetX(ctx context.Context, id int) *CourseChapter {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCourseSection queries the course_section edge of a CourseChapter.
func (c *CourseChapterClient) QueryCourseSection(cc *CourseChapter) *CourseSectionQuery {
	query := &CourseSectionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(coursechapter.Table, coursechapter.FieldID, id),
			sqlgraph.To(coursesection.Table, coursesection.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, coursechapter.CourseSectionTable, coursechapter.CourseSectionColumn),
		)
		fromV = sqlgraph.Neighbors(cc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CourseChapterClient) Hooks() []Hook {
	return c.hooks.CourseChapter
}

// CourseInfoClient is a client for the CourseInfo schema.
type CourseInfoClient struct {
	config
}

// NewCourseInfoClient returns a client for the CourseInfo from the given config.
func NewCourseInfoClient(c config) *CourseInfoClient {
	return &CourseInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `courseinfo.Hooks(f(g(h())))`.
func (c *CourseInfoClient) Use(hooks ...Hook) {
	c.hooks.CourseInfo = append(c.hooks.CourseInfo, hooks...)
}

// Create returns a builder for creating a CourseInfo entity.
func (c *CourseInfoClient) Create() *CourseInfoCreate {
	mutation := newCourseInfoMutation(c.config, OpCreate)
	return &CourseInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CourseInfo entities.
func (c *CourseInfoClient) CreateBulk(builders ...*CourseInfoCreate) *CourseInfoCreateBulk {
	return &CourseInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CourseInfo.
func (c *CourseInfoClient) Update() *CourseInfoUpdate {
	mutation := newCourseInfoMutation(c.config, OpUpdate)
	return &CourseInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CourseInfoClient) UpdateOne(ci *CourseInfo) *CourseInfoUpdateOne {
	mutation := newCourseInfoMutation(c.config, OpUpdateOne, withCourseInfo(ci))
	return &CourseInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CourseInfoClient) UpdateOneID(id int) *CourseInfoUpdateOne {
	mutation := newCourseInfoMutation(c.config, OpUpdateOne, withCourseInfoID(id))
	return &CourseInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CourseInfo.
func (c *CourseInfoClient) Delete() *CourseInfoDelete {
	mutation := newCourseInfoMutation(c.config, OpDelete)
	return &CourseInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CourseInfoClient) DeleteOne(ci *CourseInfo) *CourseInfoDeleteOne {
	return c.DeleteOneID(ci.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *CourseInfoClient) DeleteOneID(id int) *CourseInfoDeleteOne {
	builder := c.Delete().Where(courseinfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CourseInfoDeleteOne{builder}
}

// Query returns a query builder for CourseInfo.
func (c *CourseInfoClient) Query() *CourseInfoQuery {
	return &CourseInfoQuery{
		config: c.config,
	}
}

// Get returns a CourseInfo entity by its id.
func (c *CourseInfoClient) Get(ctx context.Context, id int) (*CourseInfo, error) {
	return c.Query().Where(courseinfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CourseInfoClient) GetX(ctx context.Context, id int) *CourseInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CourseInfoClient) Hooks() []Hook {
	return c.hooks.CourseInfo
}

// CourseSectionClient is a client for the CourseSection schema.
type CourseSectionClient struct {
	config
}

// NewCourseSectionClient returns a client for the CourseSection from the given config.
func NewCourseSectionClient(c config) *CourseSectionClient {
	return &CourseSectionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `coursesection.Hooks(f(g(h())))`.
func (c *CourseSectionClient) Use(hooks ...Hook) {
	c.hooks.CourseSection = append(c.hooks.CourseSection, hooks...)
}

// Create returns a builder for creating a CourseSection entity.
func (c *CourseSectionClient) Create() *CourseSectionCreate {
	mutation := newCourseSectionMutation(c.config, OpCreate)
	return &CourseSectionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CourseSection entities.
func (c *CourseSectionClient) CreateBulk(builders ...*CourseSectionCreate) *CourseSectionCreateBulk {
	return &CourseSectionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CourseSection.
func (c *CourseSectionClient) Update() *CourseSectionUpdate {
	mutation := newCourseSectionMutation(c.config, OpUpdate)
	return &CourseSectionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CourseSectionClient) UpdateOne(cs *CourseSection) *CourseSectionUpdateOne {
	mutation := newCourseSectionMutation(c.config, OpUpdateOne, withCourseSection(cs))
	return &CourseSectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CourseSectionClient) UpdateOneID(id int) *CourseSectionUpdateOne {
	mutation := newCourseSectionMutation(c.config, OpUpdateOne, withCourseSectionID(id))
	return &CourseSectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CourseSection.
func (c *CourseSectionClient) Delete() *CourseSectionDelete {
	mutation := newCourseSectionMutation(c.config, OpDelete)
	return &CourseSectionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CourseSectionClient) DeleteOne(cs *CourseSection) *CourseSectionDeleteOne {
	return c.DeleteOneID(cs.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *CourseSectionClient) DeleteOneID(id int) *CourseSectionDeleteOne {
	builder := c.Delete().Where(coursesection.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CourseSectionDeleteOne{builder}
}

// Query returns a query builder for CourseSection.
func (c *CourseSectionClient) Query() *CourseSectionQuery {
	return &CourseSectionQuery{
		config: c.config,
	}
}

// Get returns a CourseSection entity by its id.
func (c *CourseSectionClient) Get(ctx context.Context, id int) (*CourseSection, error) {
	return c.Query().Where(coursesection.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CourseSectionClient) GetX(ctx context.Context, id int) *CourseSection {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CourseSectionClient) Hooks() []Hook {
	return c.hooks.CourseSection
}

// CourseTeacherClient is a client for the CourseTeacher schema.
type CourseTeacherClient struct {
	config
}

// NewCourseTeacherClient returns a client for the CourseTeacher from the given config.
func NewCourseTeacherClient(c config) *CourseTeacherClient {
	return &CourseTeacherClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `courseteacher.Hooks(f(g(h())))`.
func (c *CourseTeacherClient) Use(hooks ...Hook) {
	c.hooks.CourseTeacher = append(c.hooks.CourseTeacher, hooks...)
}

// Create returns a builder for creating a CourseTeacher entity.
func (c *CourseTeacherClient) Create() *CourseTeacherCreate {
	mutation := newCourseTeacherMutation(c.config, OpCreate)
	return &CourseTeacherCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CourseTeacher entities.
func (c *CourseTeacherClient) CreateBulk(builders ...*CourseTeacherCreate) *CourseTeacherCreateBulk {
	return &CourseTeacherCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CourseTeacher.
func (c *CourseTeacherClient) Update() *CourseTeacherUpdate {
	mutation := newCourseTeacherMutation(c.config, OpUpdate)
	return &CourseTeacherUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CourseTeacherClient) UpdateOne(ct *CourseTeacher) *CourseTeacherUpdateOne {
	mutation := newCourseTeacherMutation(c.config, OpUpdateOne, withCourseTeacher(ct))
	return &CourseTeacherUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CourseTeacherClient) UpdateOneID(id int) *CourseTeacherUpdateOne {
	mutation := newCourseTeacherMutation(c.config, OpUpdateOne, withCourseTeacherID(id))
	return &CourseTeacherUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CourseTeacher.
func (c *CourseTeacherClient) Delete() *CourseTeacherDelete {
	mutation := newCourseTeacherMutation(c.config, OpDelete)
	return &CourseTeacherDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CourseTeacherClient) DeleteOne(ct *CourseTeacher) *CourseTeacherDeleteOne {
	return c.DeleteOneID(ct.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *CourseTeacherClient) DeleteOneID(id int) *CourseTeacherDeleteOne {
	builder := c.Delete().Where(courseteacher.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CourseTeacherDeleteOne{builder}
}

// Query returns a query builder for CourseTeacher.
func (c *CourseTeacherClient) Query() *CourseTeacherQuery {
	return &CourseTeacherQuery{
		config: c.config,
	}
}

// Get returns a CourseTeacher entity by its id.
func (c *CourseTeacherClient) Get(ctx context.Context, id int) (*CourseTeacher, error) {
	return c.Query().Where(courseteacher.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CourseTeacherClient) GetX(ctx context.Context, id int) *CourseTeacher {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCourse queries the course edge of a CourseTeacher.
func (c *CourseTeacherClient) QueryCourse(ct *CourseTeacher) *CourseQuery {
	query := &CourseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(courseteacher.Table, courseteacher.FieldID, id),
			sqlgraph.To(course.Table, course.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, courseteacher.CourseTable, courseteacher.CourseColumn),
		)
		fromV = sqlgraph.Neighbors(ct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CourseTeacherClient) Hooks() []Hook {
	return c.hooks.CourseTeacher
}
