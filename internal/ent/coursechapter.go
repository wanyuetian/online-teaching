// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"online-teaching/internal/ent/coursechapter"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// CourseChapter is the model entity for the CourseChapter schema.
type CourseChapter struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 章标题
	Title string `json:"title,omitempty"`
	// IsDeleted holds the value of the "is_deleted" field.
	IsDeleted bool `json:"is_deleted,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CourseChapterQuery when eager-loading is set.
	Edges           CourseChapterEdges `json:"edges"`
	course_chapters *int
}

// CourseChapterEdges holds the relations/edges for other nodes in the graph.
type CourseChapterEdges struct {
	// CourseSection holds the value of the course_section edge.
	CourseSection []*CourseSection `json:"course_section,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CourseSectionOrErr returns the CourseSection value or an error if the edge
// was not loaded in eager-loading.
func (e CourseChapterEdges) CourseSectionOrErr() ([]*CourseSection, error) {
	if e.loadedTypes[0] {
		return e.CourseSection, nil
	}
	return nil, &NotLoadedError{edge: "course_section"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CourseChapter) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case coursechapter.FieldIsDeleted:
			values[i] = new(sql.NullBool)
		case coursechapter.FieldID:
			values[i] = new(sql.NullInt64)
		case coursechapter.FieldTitle:
			values[i] = new(sql.NullString)
		case coursechapter.FieldCreatedAt, coursechapter.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case coursechapter.ForeignKeys[0]: // course_chapters
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CourseChapter", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CourseChapter fields.
func (cc *CourseChapter) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case coursechapter.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cc.ID = int(value.Int64)
		case coursechapter.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				cc.Title = value.String
			}
		case coursechapter.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				cc.IsDeleted = value.Bool
			}
		case coursechapter.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cc.CreatedAt = value.Time
			}
		case coursechapter.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cc.UpdatedAt = value.Time
			}
		case coursechapter.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field course_chapters", value)
			} else if value.Valid {
				cc.course_chapters = new(int)
				*cc.course_chapters = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryCourseSection queries the "course_section" edge of the CourseChapter entity.
func (cc *CourseChapter) QueryCourseSection() *CourseSectionQuery {
	return (&CourseChapterClient{config: cc.config}).QueryCourseSection(cc)
}

// Update returns a builder for updating this CourseChapter.
// Note that you need to call CourseChapter.Unwrap() before calling this method if this CourseChapter
// was returned from a transaction, and the transaction was committed or rolled back.
func (cc *CourseChapter) Update() *CourseChapterUpdateOne {
	return (&CourseChapterClient{config: cc.config}).UpdateOne(cc)
}

// Unwrap unwraps the CourseChapter entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cc *CourseChapter) Unwrap() *CourseChapter {
	_tx, ok := cc.config.driver.(*txDriver)
	if !ok {
		panic("ent: CourseChapter is not a transactional entity")
	}
	cc.config.driver = _tx.drv
	return cc
}

// String implements the fmt.Stringer.
func (cc *CourseChapter) String() string {
	var builder strings.Builder
	builder.WriteString("CourseChapter(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cc.ID))
	builder.WriteString("title=")
	builder.WriteString(cc.Title)
	builder.WriteString(", ")
	builder.WriteString("is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", cc.IsDeleted))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(cc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cc.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CourseChapters is a parsable slice of CourseChapter.
type CourseChapters []*CourseChapter

func (cc CourseChapters) config(cfg config) {
	for _i := range cc {
		cc[_i].config = cfg
	}
}
