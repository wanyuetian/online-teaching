// Code generated by ent, DO NOT EDIT.

package courseinfo

import (
	"online-teaching/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ClickCount applies equality check predicate on the "click_count" field. It's identical to ClickCountEQ.
func ClickCount(v int) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClickCount), v))
	})
}

// LearnCount applies equality check predicate on the "learn_count" field. It's identical to LearnCountEQ.
func LearnCount(v int) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLearnCount), v))
	})
}

// TotalDuration applies equality check predicate on the "total_duration" field. It's identical to TotalDurationEQ.
func TotalDuration(v int) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalDuration), v))
	})
}

// SectionCount applies equality check predicate on the "section_count" field. It's identical to SectionCountEQ.
func SectionCount(v int) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSectionCount), v))
	})
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v float64) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrice), v))
	})
}

// Detail applies equality check predicate on the "detail" field. It's identical to DetailEQ.
func Detail(v string) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDetail), v))
	})
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v string) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), v))
	})
}

// IsDeleted applies equality check predicate on the "is_deleted" field. It's identical to IsDeletedEQ.
func IsDeleted(v bool) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDeleted), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// ClickCountEQ applies the EQ predicate on the "click_count" field.
func ClickCountEQ(v int) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClickCount), v))
	})
}

// ClickCountNEQ applies the NEQ predicate on the "click_count" field.
func ClickCountNEQ(v int) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClickCount), v))
	})
}

// ClickCountIn applies the In predicate on the "click_count" field.
func ClickCountIn(vs ...int) predicate.CourseInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldClickCount), v...))
	})
}

// ClickCountNotIn applies the NotIn predicate on the "click_count" field.
func ClickCountNotIn(vs ...int) predicate.CourseInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldClickCount), v...))
	})
}

// ClickCountGT applies the GT predicate on the "click_count" field.
func ClickCountGT(v int) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClickCount), v))
	})
}

// ClickCountGTE applies the GTE predicate on the "click_count" field.
func ClickCountGTE(v int) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClickCount), v))
	})
}

// ClickCountLT applies the LT predicate on the "click_count" field.
func ClickCountLT(v int) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClickCount), v))
	})
}

// ClickCountLTE applies the LTE predicate on the "click_count" field.
func ClickCountLTE(v int) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClickCount), v))
	})
}

// LearnCountEQ applies the EQ predicate on the "learn_count" field.
func LearnCountEQ(v int) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLearnCount), v))
	})
}

// LearnCountNEQ applies the NEQ predicate on the "learn_count" field.
func LearnCountNEQ(v int) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLearnCount), v))
	})
}

// LearnCountIn applies the In predicate on the "learn_count" field.
func LearnCountIn(vs ...int) predicate.CourseInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLearnCount), v...))
	})
}

// LearnCountNotIn applies the NotIn predicate on the "learn_count" field.
func LearnCountNotIn(vs ...int) predicate.CourseInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLearnCount), v...))
	})
}

// LearnCountGT applies the GT predicate on the "learn_count" field.
func LearnCountGT(v int) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLearnCount), v))
	})
}

// LearnCountGTE applies the GTE predicate on the "learn_count" field.
func LearnCountGTE(v int) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLearnCount), v))
	})
}

// LearnCountLT applies the LT predicate on the "learn_count" field.
func LearnCountLT(v int) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLearnCount), v))
	})
}

// LearnCountLTE applies the LTE predicate on the "learn_count" field.
func LearnCountLTE(v int) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLearnCount), v))
	})
}

// TotalDurationEQ applies the EQ predicate on the "total_duration" field.
func TotalDurationEQ(v int) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalDuration), v))
	})
}

// TotalDurationNEQ applies the NEQ predicate on the "total_duration" field.
func TotalDurationNEQ(v int) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTotalDuration), v))
	})
}

// TotalDurationIn applies the In predicate on the "total_duration" field.
func TotalDurationIn(vs ...int) predicate.CourseInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTotalDuration), v...))
	})
}

// TotalDurationNotIn applies the NotIn predicate on the "total_duration" field.
func TotalDurationNotIn(vs ...int) predicate.CourseInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTotalDuration), v...))
	})
}

// TotalDurationGT applies the GT predicate on the "total_duration" field.
func TotalDurationGT(v int) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTotalDuration), v))
	})
}

// TotalDurationGTE applies the GTE predicate on the "total_duration" field.
func TotalDurationGTE(v int) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTotalDuration), v))
	})
}

// TotalDurationLT applies the LT predicate on the "total_duration" field.
func TotalDurationLT(v int) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTotalDuration), v))
	})
}

// TotalDurationLTE applies the LTE predicate on the "total_duration" field.
func TotalDurationLTE(v int) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTotalDuration), v))
	})
}

// SectionCountEQ applies the EQ predicate on the "section_count" field.
func SectionCountEQ(v int) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSectionCount), v))
	})
}

// SectionCountNEQ applies the NEQ predicate on the "section_count" field.
func SectionCountNEQ(v int) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSectionCount), v))
	})
}

// SectionCountIn applies the In predicate on the "section_count" field.
func SectionCountIn(vs ...int) predicate.CourseInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSectionCount), v...))
	})
}

// SectionCountNotIn applies the NotIn predicate on the "section_count" field.
func SectionCountNotIn(vs ...int) predicate.CourseInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSectionCount), v...))
	})
}

// SectionCountGT applies the GT predicate on the "section_count" field.
func SectionCountGT(v int) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSectionCount), v))
	})
}

// SectionCountGTE applies the GTE predicate on the "section_count" field.
func SectionCountGTE(v int) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSectionCount), v))
	})
}

// SectionCountLT applies the LT predicate on the "section_count" field.
func SectionCountLT(v int) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSectionCount), v))
	})
}

// SectionCountLTE applies the LTE predicate on the "section_count" field.
func SectionCountLTE(v int) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSectionCount), v))
	})
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v float64) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrice), v))
	})
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v float64) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrice), v))
	})
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...float64) predicate.CourseInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPrice), v...))
	})
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...float64) predicate.CourseInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPrice), v...))
	})
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v float64) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrice), v))
	})
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v float64) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrice), v))
	})
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v float64) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrice), v))
	})
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v float64) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrice), v))
	})
}

// DetailEQ applies the EQ predicate on the "detail" field.
func DetailEQ(v string) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDetail), v))
	})
}

// DetailNEQ applies the NEQ predicate on the "detail" field.
func DetailNEQ(v string) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDetail), v))
	})
}

// DetailIn applies the In predicate on the "detail" field.
func DetailIn(vs ...string) predicate.CourseInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDetail), v...))
	})
}

// DetailNotIn applies the NotIn predicate on the "detail" field.
func DetailNotIn(vs ...string) predicate.CourseInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDetail), v...))
	})
}

// DetailGT applies the GT predicate on the "detail" field.
func DetailGT(v string) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDetail), v))
	})
}

// DetailGTE applies the GTE predicate on the "detail" field.
func DetailGTE(v string) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDetail), v))
	})
}

// DetailLT applies the LT predicate on the "detail" field.
func DetailLT(v string) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDetail), v))
	})
}

// DetailLTE applies the LTE predicate on the "detail" field.
func DetailLTE(v string) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDetail), v))
	})
}

// DetailContains applies the Contains predicate on the "detail" field.
func DetailContains(v string) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDetail), v))
	})
}

// DetailHasPrefix applies the HasPrefix predicate on the "detail" field.
func DetailHasPrefix(v string) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDetail), v))
	})
}

// DetailHasSuffix applies the HasSuffix predicate on the "detail" field.
func DetailHasSuffix(v string) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDetail), v))
	})
}

// DetailEqualFold applies the EqualFold predicate on the "detail" field.
func DetailEqualFold(v string) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDetail), v))
	})
}

// DetailContainsFold applies the ContainsFold predicate on the "detail" field.
func DetailContainsFold(v string) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDetail), v))
	})
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v string) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), v))
	})
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v string) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldState), v))
	})
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...string) predicate.CourseInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldState), v...))
	})
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...string) predicate.CourseInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldState), v...))
	})
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v string) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldState), v))
	})
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v string) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldState), v))
	})
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v string) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldState), v))
	})
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v string) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldState), v))
	})
}

// StateContains applies the Contains predicate on the "state" field.
func StateContains(v string) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldState), v))
	})
}

// StateHasPrefix applies the HasPrefix predicate on the "state" field.
func StateHasPrefix(v string) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldState), v))
	})
}

// StateHasSuffix applies the HasSuffix predicate on the "state" field.
func StateHasSuffix(v string) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldState), v))
	})
}

// StateEqualFold applies the EqualFold predicate on the "state" field.
func StateEqualFold(v string) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldState), v))
	})
}

// StateContainsFold applies the ContainsFold predicate on the "state" field.
func StateContainsFold(v string) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldState), v))
	})
}

// IsDeletedEQ applies the EQ predicate on the "is_deleted" field.
func IsDeletedEQ(v bool) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedNEQ applies the NEQ predicate on the "is_deleted" field.
func IsDeletedNEQ(v bool) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsDeleted), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.CourseInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CourseInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.CourseInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.CourseInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.CourseInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.CourseInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CourseInfo) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CourseInfo) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CourseInfo) predicate.CourseInfo {
	return predicate.CourseInfo(func(s *sql.Selector) {
		p(s.Not())
	})
}
