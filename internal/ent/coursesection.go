// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"online-teaching/internal/ent/coursesection"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// CourseSection is the model entity for the CourseSection schema.
type CourseSection struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 小节标题
	Title string `json:"title,omitempty"`
	// 小节类型
	Type string `json:"type,omitempty"`
	// 小节视频地址
	Video string `json:"video,omitempty"`
	// IsDeleted holds the value of the "is_deleted" field.
	IsDeleted bool `json:"is_deleted,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt                     time.Time `json:"updated_at,omitempty"`
	course_sections               *int
	course_chapter_course_section *int
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CourseSection) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case coursesection.FieldIsDeleted:
			values[i] = new(sql.NullBool)
		case coursesection.FieldID:
			values[i] = new(sql.NullInt64)
		case coursesection.FieldTitle, coursesection.FieldType, coursesection.FieldVideo:
			values[i] = new(sql.NullString)
		case coursesection.FieldCreatedAt, coursesection.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case coursesection.ForeignKeys[0]: // course_sections
			values[i] = new(sql.NullInt64)
		case coursesection.ForeignKeys[1]: // course_chapter_course_section
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CourseSection", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CourseSection fields.
func (cs *CourseSection) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case coursesection.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cs.ID = int(value.Int64)
		case coursesection.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				cs.Title = value.String
			}
		case coursesection.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				cs.Type = value.String
			}
		case coursesection.FieldVideo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field video", values[i])
			} else if value.Valid {
				cs.Video = value.String
			}
		case coursesection.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				cs.IsDeleted = value.Bool
			}
		case coursesection.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cs.CreatedAt = value.Time
			}
		case coursesection.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cs.UpdatedAt = value.Time
			}
		case coursesection.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field course_sections", value)
			} else if value.Valid {
				cs.course_sections = new(int)
				*cs.course_sections = int(value.Int64)
			}
		case coursesection.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field course_chapter_course_section", value)
			} else if value.Valid {
				cs.course_chapter_course_section = new(int)
				*cs.course_chapter_course_section = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this CourseSection.
// Note that you need to call CourseSection.Unwrap() before calling this method if this CourseSection
// was returned from a transaction, and the transaction was committed or rolled back.
func (cs *CourseSection) Update() *CourseSectionUpdateOne {
	return (&CourseSectionClient{config: cs.config}).UpdateOne(cs)
}

// Unwrap unwraps the CourseSection entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cs *CourseSection) Unwrap() *CourseSection {
	_tx, ok := cs.config.driver.(*txDriver)
	if !ok {
		panic("ent: CourseSection is not a transactional entity")
	}
	cs.config.driver = _tx.drv
	return cs
}

// String implements the fmt.Stringer.
func (cs *CourseSection) String() string {
	var builder strings.Builder
	builder.WriteString("CourseSection(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cs.ID))
	builder.WriteString("title=")
	builder.WriteString(cs.Title)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(cs.Type)
	builder.WriteString(", ")
	builder.WriteString("video=")
	builder.WriteString(cs.Video)
	builder.WriteString(", ")
	builder.WriteString("is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", cs.IsDeleted))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(cs.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cs.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CourseSections is a parsable slice of CourseSection.
type CourseSections []*CourseSection

func (cs CourseSections) config(cfg config) {
	for _i := range cs {
		cs[_i].config = cfg
	}
}
