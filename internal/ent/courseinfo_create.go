// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"online-teaching/internal/ent/courseinfo"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CourseInfoCreate is the builder for creating a CourseInfo entity.
type CourseInfoCreate struct {
	config
	mutation *CourseInfoMutation
	hooks    []Hook
}

// SetClickCount sets the "click_count" field.
func (cic *CourseInfoCreate) SetClickCount(i int) *CourseInfoCreate {
	cic.mutation.SetClickCount(i)
	return cic
}

// SetLearnCount sets the "learn_count" field.
func (cic *CourseInfoCreate) SetLearnCount(i int) *CourseInfoCreate {
	cic.mutation.SetLearnCount(i)
	return cic
}

// SetTotalDuration sets the "total_duration" field.
func (cic *CourseInfoCreate) SetTotalDuration(i int) *CourseInfoCreate {
	cic.mutation.SetTotalDuration(i)
	return cic
}

// SetSectionCount sets the "section_count" field.
func (cic *CourseInfoCreate) SetSectionCount(i int) *CourseInfoCreate {
	cic.mutation.SetSectionCount(i)
	return cic
}

// SetPrice sets the "price" field.
func (cic *CourseInfoCreate) SetPrice(f float64) *CourseInfoCreate {
	cic.mutation.SetPrice(f)
	return cic
}

// SetDetail sets the "detail" field.
func (cic *CourseInfoCreate) SetDetail(s string) *CourseInfoCreate {
	cic.mutation.SetDetail(s)
	return cic
}

// SetNillableDetail sets the "detail" field if the given value is not nil.
func (cic *CourseInfoCreate) SetNillableDetail(s *string) *CourseInfoCreate {
	if s != nil {
		cic.SetDetail(*s)
	}
	return cic
}

// SetState sets the "state" field.
func (cic *CourseInfoCreate) SetState(s string) *CourseInfoCreate {
	cic.mutation.SetState(s)
	return cic
}

// SetNillableState sets the "state" field if the given value is not nil.
func (cic *CourseInfoCreate) SetNillableState(s *string) *CourseInfoCreate {
	if s != nil {
		cic.SetState(*s)
	}
	return cic
}

// SetIsDeleted sets the "is_deleted" field.
func (cic *CourseInfoCreate) SetIsDeleted(b bool) *CourseInfoCreate {
	cic.mutation.SetIsDeleted(b)
	return cic
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (cic *CourseInfoCreate) SetNillableIsDeleted(b *bool) *CourseInfoCreate {
	if b != nil {
		cic.SetIsDeleted(*b)
	}
	return cic
}

// SetCreatedAt sets the "created_at" field.
func (cic *CourseInfoCreate) SetCreatedAt(t time.Time) *CourseInfoCreate {
	cic.mutation.SetCreatedAt(t)
	return cic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cic *CourseInfoCreate) SetNillableCreatedAt(t *time.Time) *CourseInfoCreate {
	if t != nil {
		cic.SetCreatedAt(*t)
	}
	return cic
}

// SetUpdatedAt sets the "updated_at" field.
func (cic *CourseInfoCreate) SetUpdatedAt(t time.Time) *CourseInfoCreate {
	cic.mutation.SetUpdatedAt(t)
	return cic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cic *CourseInfoCreate) SetNillableUpdatedAt(t *time.Time) *CourseInfoCreate {
	if t != nil {
		cic.SetUpdatedAt(*t)
	}
	return cic
}

// SetDeletedAt sets the "deleted_at" field.
func (cic *CourseInfoCreate) SetDeletedAt(t time.Time) *CourseInfoCreate {
	cic.mutation.SetDeletedAt(t)
	return cic
}

// Mutation returns the CourseInfoMutation object of the builder.
func (cic *CourseInfoCreate) Mutation() *CourseInfoMutation {
	return cic.mutation
}

// Save creates the CourseInfo in the database.
func (cic *CourseInfoCreate) Save(ctx context.Context) (*CourseInfo, error) {
	var (
		err  error
		node *CourseInfo
	)
	cic.defaults()
	if len(cic.hooks) == 0 {
		if err = cic.check(); err != nil {
			return nil, err
		}
		node, err = cic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CourseInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cic.check(); err != nil {
				return nil, err
			}
			cic.mutation = mutation
			if node, err = cic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cic.hooks) - 1; i >= 0; i-- {
			if cic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cic.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cic.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CourseInfo)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CourseInfoMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cic *CourseInfoCreate) SaveX(ctx context.Context) *CourseInfo {
	v, err := cic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cic *CourseInfoCreate) Exec(ctx context.Context) error {
	_, err := cic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cic *CourseInfoCreate) ExecX(ctx context.Context) {
	if err := cic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cic *CourseInfoCreate) defaults() {
	if _, ok := cic.mutation.Detail(); !ok {
		v := courseinfo.DefaultDetail
		cic.mutation.SetDetail(v)
	}
	if _, ok := cic.mutation.State(); !ok {
		v := courseinfo.DefaultState
		cic.mutation.SetState(v)
	}
	if _, ok := cic.mutation.IsDeleted(); !ok {
		v := courseinfo.DefaultIsDeleted
		cic.mutation.SetIsDeleted(v)
	}
	if _, ok := cic.mutation.CreatedAt(); !ok {
		v := courseinfo.DefaultCreatedAt()
		cic.mutation.SetCreatedAt(v)
	}
	if _, ok := cic.mutation.UpdatedAt(); !ok {
		v := courseinfo.DefaultUpdatedAt()
		cic.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cic *CourseInfoCreate) check() error {
	if _, ok := cic.mutation.ClickCount(); !ok {
		return &ValidationError{Name: "click_count", err: errors.New(`ent: missing required field "CourseInfo.click_count"`)}
	}
	if _, ok := cic.mutation.LearnCount(); !ok {
		return &ValidationError{Name: "learn_count", err: errors.New(`ent: missing required field "CourseInfo.learn_count"`)}
	}
	if _, ok := cic.mutation.TotalDuration(); !ok {
		return &ValidationError{Name: "total_duration", err: errors.New(`ent: missing required field "CourseInfo.total_duration"`)}
	}
	if _, ok := cic.mutation.SectionCount(); !ok {
		return &ValidationError{Name: "section_count", err: errors.New(`ent: missing required field "CourseInfo.section_count"`)}
	}
	if _, ok := cic.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "CourseInfo.price"`)}
	}
	if _, ok := cic.mutation.Detail(); !ok {
		return &ValidationError{Name: "detail", err: errors.New(`ent: missing required field "CourseInfo.detail"`)}
	}
	if _, ok := cic.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "CourseInfo.state"`)}
	}
	if _, ok := cic.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New(`ent: missing required field "CourseInfo.is_deleted"`)}
	}
	if _, ok := cic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CourseInfo.created_at"`)}
	}
	if _, ok := cic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CourseInfo.updated_at"`)}
	}
	if _, ok := cic.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "CourseInfo.deleted_at"`)}
	}
	return nil
}

func (cic *CourseInfoCreate) sqlSave(ctx context.Context) (*CourseInfo, error) {
	_node, _spec := cic.createSpec()
	if err := sqlgraph.CreateNode(ctx, cic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cic *CourseInfoCreate) createSpec() (*CourseInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &CourseInfo{config: cic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: courseinfo.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: courseinfo.FieldID,
			},
		}
	)
	if value, ok := cic.mutation.ClickCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: courseinfo.FieldClickCount,
		})
		_node.ClickCount = value
	}
	if value, ok := cic.mutation.LearnCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: courseinfo.FieldLearnCount,
		})
		_node.LearnCount = value
	}
	if value, ok := cic.mutation.TotalDuration(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: courseinfo.FieldTotalDuration,
		})
		_node.TotalDuration = value
	}
	if value, ok := cic.mutation.SectionCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: courseinfo.FieldSectionCount,
		})
		_node.SectionCount = value
	}
	if value, ok := cic.mutation.Price(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: courseinfo.FieldPrice,
		})
		_node.Price = value
	}
	if value, ok := cic.mutation.Detail(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: courseinfo.FieldDetail,
		})
		_node.Detail = value
	}
	if value, ok := cic.mutation.State(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: courseinfo.FieldState,
		})
		_node.State = value
	}
	if value, ok := cic.mutation.IsDeleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: courseinfo.FieldIsDeleted,
		})
		_node.IsDeleted = value
	}
	if value, ok := cic.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: courseinfo.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := cic.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: courseinfo.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := cic.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: courseinfo.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	return _node, _spec
}

// CourseInfoCreateBulk is the builder for creating many CourseInfo entities in bulk.
type CourseInfoCreateBulk struct {
	config
	builders []*CourseInfoCreate
}

// Save creates the CourseInfo entities in the database.
func (cicb *CourseInfoCreateBulk) Save(ctx context.Context) ([]*CourseInfo, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cicb.builders))
	nodes := make([]*CourseInfo, len(cicb.builders))
	mutators := make([]Mutator, len(cicb.builders))
	for i := range cicb.builders {
		func(i int, root context.Context) {
			builder := cicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CourseInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cicb *CourseInfoCreateBulk) SaveX(ctx context.Context) []*CourseInfo {
	v, err := cicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cicb *CourseInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := cicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cicb *CourseInfoCreateBulk) ExecX(ctx context.Context) {
	if err := cicb.Exec(ctx); err != nil {
		panic(err)
	}
}
