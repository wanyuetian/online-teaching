// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"online-teaching/internal/ent/course"
	"online-teaching/internal/ent/coursechapter"
	"online-teaching/internal/ent/courseinfo"
	"online-teaching/internal/ent/coursesection"
	"online-teaching/internal/ent/courseteacher"
	"online-teaching/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CourseUpdate is the builder for updating Course entities.
type CourseUpdate struct {
	config
	hooks    []Hook
	mutation *CourseMutation
}

// Where appends a list predicates to the CourseUpdate builder.
func (cu *CourseUpdate) Where(ps ...predicate.Course) *CourseUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *CourseUpdate) SetName(s string) *CourseUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetDesc sets the "desc" field.
func (cu *CourseUpdate) SetDesc(s string) *CourseUpdate {
	cu.mutation.SetDesc(s)
	return cu
}

// SetBackgroundImage sets the "background_image" field.
func (cu *CourseUpdate) SetBackgroundImage(s string) *CourseUpdate {
	cu.mutation.SetBackgroundImage(s)
	return cu
}

// SetIsDeleted sets the "is_deleted" field.
func (cu *CourseUpdate) SetIsDeleted(b bool) *CourseUpdate {
	cu.mutation.SetIsDeleted(b)
	return cu
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (cu *CourseUpdate) SetNillableIsDeleted(b *bool) *CourseUpdate {
	if b != nil {
		cu.SetIsDeleted(*b)
	}
	return cu
}

// SetCreatedAt sets the "created_at" field.
func (cu *CourseUpdate) SetCreatedAt(t time.Time) *CourseUpdate {
	cu.mutation.SetCreatedAt(t)
	return cu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cu *CourseUpdate) SetNillableCreatedAt(t *time.Time) *CourseUpdate {
	if t != nil {
		cu.SetCreatedAt(*t)
	}
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CourseUpdate) SetUpdatedAt(t time.Time) *CourseUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetDeletedAt sets the "deleted_at" field.
func (cu *CourseUpdate) SetDeletedAt(t time.Time) *CourseUpdate {
	cu.mutation.SetDeletedAt(t)
	return cu
}

// AddCourseTeacherIDs adds the "course_teacher" edge to the CourseTeacher entity by IDs.
func (cu *CourseUpdate) AddCourseTeacherIDs(ids ...int) *CourseUpdate {
	cu.mutation.AddCourseTeacherIDs(ids...)
	return cu
}

// AddCourseTeacher adds the "course_teacher" edges to the CourseTeacher entity.
func (cu *CourseUpdate) AddCourseTeacher(c ...*CourseTeacher) *CourseUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCourseTeacherIDs(ids...)
}

// AddCourseInfoIDs adds the "course_info" edge to the CourseInfo entity by IDs.
func (cu *CourseUpdate) AddCourseInfoIDs(ids ...int) *CourseUpdate {
	cu.mutation.AddCourseInfoIDs(ids...)
	return cu
}

// AddCourseInfo adds the "course_info" edges to the CourseInfo entity.
func (cu *CourseUpdate) AddCourseInfo(c ...*CourseInfo) *CourseUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCourseInfoIDs(ids...)
}

// AddCourseChapterIDs adds the "course_chapter" edge to the CourseChapter entity by IDs.
func (cu *CourseUpdate) AddCourseChapterIDs(ids ...int) *CourseUpdate {
	cu.mutation.AddCourseChapterIDs(ids...)
	return cu
}

// AddCourseChapter adds the "course_chapter" edges to the CourseChapter entity.
func (cu *CourseUpdate) AddCourseChapter(c ...*CourseChapter) *CourseUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCourseChapterIDs(ids...)
}

// AddCourseSectionIDs adds the "course_section" edge to the CourseSection entity by IDs.
func (cu *CourseUpdate) AddCourseSectionIDs(ids ...int) *CourseUpdate {
	cu.mutation.AddCourseSectionIDs(ids...)
	return cu
}

// AddCourseSection adds the "course_section" edges to the CourseSection entity.
func (cu *CourseUpdate) AddCourseSection(c ...*CourseSection) *CourseUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCourseSectionIDs(ids...)
}

// Mutation returns the CourseMutation object of the builder.
func (cu *CourseUpdate) Mutation() *CourseMutation {
	return cu.mutation
}

// ClearCourseTeacher clears all "course_teacher" edges to the CourseTeacher entity.
func (cu *CourseUpdate) ClearCourseTeacher() *CourseUpdate {
	cu.mutation.ClearCourseTeacher()
	return cu
}

// RemoveCourseTeacherIDs removes the "course_teacher" edge to CourseTeacher entities by IDs.
func (cu *CourseUpdate) RemoveCourseTeacherIDs(ids ...int) *CourseUpdate {
	cu.mutation.RemoveCourseTeacherIDs(ids...)
	return cu
}

// RemoveCourseTeacher removes "course_teacher" edges to CourseTeacher entities.
func (cu *CourseUpdate) RemoveCourseTeacher(c ...*CourseTeacher) *CourseUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCourseTeacherIDs(ids...)
}

// ClearCourseInfo clears all "course_info" edges to the CourseInfo entity.
func (cu *CourseUpdate) ClearCourseInfo() *CourseUpdate {
	cu.mutation.ClearCourseInfo()
	return cu
}

// RemoveCourseInfoIDs removes the "course_info" edge to CourseInfo entities by IDs.
func (cu *CourseUpdate) RemoveCourseInfoIDs(ids ...int) *CourseUpdate {
	cu.mutation.RemoveCourseInfoIDs(ids...)
	return cu
}

// RemoveCourseInfo removes "course_info" edges to CourseInfo entities.
func (cu *CourseUpdate) RemoveCourseInfo(c ...*CourseInfo) *CourseUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCourseInfoIDs(ids...)
}

// ClearCourseChapter clears all "course_chapter" edges to the CourseChapter entity.
func (cu *CourseUpdate) ClearCourseChapter() *CourseUpdate {
	cu.mutation.ClearCourseChapter()
	return cu
}

// RemoveCourseChapterIDs removes the "course_chapter" edge to CourseChapter entities by IDs.
func (cu *CourseUpdate) RemoveCourseChapterIDs(ids ...int) *CourseUpdate {
	cu.mutation.RemoveCourseChapterIDs(ids...)
	return cu
}

// RemoveCourseChapter removes "course_chapter" edges to CourseChapter entities.
func (cu *CourseUpdate) RemoveCourseChapter(c ...*CourseChapter) *CourseUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCourseChapterIDs(ids...)
}

// ClearCourseSection clears all "course_section" edges to the CourseSection entity.
func (cu *CourseUpdate) ClearCourseSection() *CourseUpdate {
	cu.mutation.ClearCourseSection()
	return cu
}

// RemoveCourseSectionIDs removes the "course_section" edge to CourseSection entities by IDs.
func (cu *CourseUpdate) RemoveCourseSectionIDs(ids ...int) *CourseUpdate {
	cu.mutation.RemoveCourseSectionIDs(ids...)
	return cu
}

// RemoveCourseSection removes "course_section" edges to CourseSection entities.
func (cu *CourseUpdate) RemoveCourseSection(c ...*CourseSection) *CourseUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCourseSectionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CourseUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cu.defaults()
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CourseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CourseUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CourseUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CourseUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CourseUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := course.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CourseUpdate) check() error {
	if v, ok := cu.mutation.Name(); ok {
		if err := course.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Course.name": %w`, err)}
		}
	}
	return nil
}

func (cu *CourseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   course.Table,
			Columns: course.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: course.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: course.FieldName,
		})
	}
	if value, ok := cu.mutation.Desc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: course.FieldDesc,
		})
	}
	if value, ok := cu.mutation.BackgroundImage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: course.FieldBackgroundImage,
		})
	}
	if value, ok := cu.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: course.FieldIsDeleted,
		})
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: course.FieldCreatedAt,
		})
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: course.FieldUpdatedAt,
		})
	}
	if value, ok := cu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: course.FieldDeletedAt,
		})
	}
	if cu.mutation.CourseTeacherCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.CourseTeacherTable,
			Columns: []string{course.CourseTeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: courseteacher.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCourseTeacherIDs(); len(nodes) > 0 && !cu.mutation.CourseTeacherCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.CourseTeacherTable,
			Columns: []string{course.CourseTeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: courseteacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CourseTeacherIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.CourseTeacherTable,
			Columns: []string{course.CourseTeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: courseteacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CourseInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.CourseInfoTable,
			Columns: []string{course.CourseInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: courseinfo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCourseInfoIDs(); len(nodes) > 0 && !cu.mutation.CourseInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.CourseInfoTable,
			Columns: []string{course.CourseInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: courseinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CourseInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.CourseInfoTable,
			Columns: []string{course.CourseInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: courseinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CourseChapterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.CourseChapterTable,
			Columns: []string{course.CourseChapterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: coursechapter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCourseChapterIDs(); len(nodes) > 0 && !cu.mutation.CourseChapterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.CourseChapterTable,
			Columns: []string{course.CourseChapterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: coursechapter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CourseChapterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.CourseChapterTable,
			Columns: []string{course.CourseChapterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: coursechapter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CourseSectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.CourseSectionTable,
			Columns: []string{course.CourseSectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: coursesection.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCourseSectionIDs(); len(nodes) > 0 && !cu.mutation.CourseSectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.CourseSectionTable,
			Columns: []string{course.CourseSectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: coursesection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CourseSectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.CourseSectionTable,
			Columns: []string{course.CourseSectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: coursesection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{course.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CourseUpdateOne is the builder for updating a single Course entity.
type CourseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CourseMutation
}

// SetName sets the "name" field.
func (cuo *CourseUpdateOne) SetName(s string) *CourseUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetDesc sets the "desc" field.
func (cuo *CourseUpdateOne) SetDesc(s string) *CourseUpdateOne {
	cuo.mutation.SetDesc(s)
	return cuo
}

// SetBackgroundImage sets the "background_image" field.
func (cuo *CourseUpdateOne) SetBackgroundImage(s string) *CourseUpdateOne {
	cuo.mutation.SetBackgroundImage(s)
	return cuo
}

// SetIsDeleted sets the "is_deleted" field.
func (cuo *CourseUpdateOne) SetIsDeleted(b bool) *CourseUpdateOne {
	cuo.mutation.SetIsDeleted(b)
	return cuo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (cuo *CourseUpdateOne) SetNillableIsDeleted(b *bool) *CourseUpdateOne {
	if b != nil {
		cuo.SetIsDeleted(*b)
	}
	return cuo
}

// SetCreatedAt sets the "created_at" field.
func (cuo *CourseUpdateOne) SetCreatedAt(t time.Time) *CourseUpdateOne {
	cuo.mutation.SetCreatedAt(t)
	return cuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cuo *CourseUpdateOne) SetNillableCreatedAt(t *time.Time) *CourseUpdateOne {
	if t != nil {
		cuo.SetCreatedAt(*t)
	}
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CourseUpdateOne) SetUpdatedAt(t time.Time) *CourseUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cuo *CourseUpdateOne) SetDeletedAt(t time.Time) *CourseUpdateOne {
	cuo.mutation.SetDeletedAt(t)
	return cuo
}

// AddCourseTeacherIDs adds the "course_teacher" edge to the CourseTeacher entity by IDs.
func (cuo *CourseUpdateOne) AddCourseTeacherIDs(ids ...int) *CourseUpdateOne {
	cuo.mutation.AddCourseTeacherIDs(ids...)
	return cuo
}

// AddCourseTeacher adds the "course_teacher" edges to the CourseTeacher entity.
func (cuo *CourseUpdateOne) AddCourseTeacher(c ...*CourseTeacher) *CourseUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCourseTeacherIDs(ids...)
}

// AddCourseInfoIDs adds the "course_info" edge to the CourseInfo entity by IDs.
func (cuo *CourseUpdateOne) AddCourseInfoIDs(ids ...int) *CourseUpdateOne {
	cuo.mutation.AddCourseInfoIDs(ids...)
	return cuo
}

// AddCourseInfo adds the "course_info" edges to the CourseInfo entity.
func (cuo *CourseUpdateOne) AddCourseInfo(c ...*CourseInfo) *CourseUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCourseInfoIDs(ids...)
}

// AddCourseChapterIDs adds the "course_chapter" edge to the CourseChapter entity by IDs.
func (cuo *CourseUpdateOne) AddCourseChapterIDs(ids ...int) *CourseUpdateOne {
	cuo.mutation.AddCourseChapterIDs(ids...)
	return cuo
}

// AddCourseChapter adds the "course_chapter" edges to the CourseChapter entity.
func (cuo *CourseUpdateOne) AddCourseChapter(c ...*CourseChapter) *CourseUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCourseChapterIDs(ids...)
}

// AddCourseSectionIDs adds the "course_section" edge to the CourseSection entity by IDs.
func (cuo *CourseUpdateOne) AddCourseSectionIDs(ids ...int) *CourseUpdateOne {
	cuo.mutation.AddCourseSectionIDs(ids...)
	return cuo
}

// AddCourseSection adds the "course_section" edges to the CourseSection entity.
func (cuo *CourseUpdateOne) AddCourseSection(c ...*CourseSection) *CourseUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCourseSectionIDs(ids...)
}

// Mutation returns the CourseMutation object of the builder.
func (cuo *CourseUpdateOne) Mutation() *CourseMutation {
	return cuo.mutation
}

// ClearCourseTeacher clears all "course_teacher" edges to the CourseTeacher entity.
func (cuo *CourseUpdateOne) ClearCourseTeacher() *CourseUpdateOne {
	cuo.mutation.ClearCourseTeacher()
	return cuo
}

// RemoveCourseTeacherIDs removes the "course_teacher" edge to CourseTeacher entities by IDs.
func (cuo *CourseUpdateOne) RemoveCourseTeacherIDs(ids ...int) *CourseUpdateOne {
	cuo.mutation.RemoveCourseTeacherIDs(ids...)
	return cuo
}

// RemoveCourseTeacher removes "course_teacher" edges to CourseTeacher entities.
func (cuo *CourseUpdateOne) RemoveCourseTeacher(c ...*CourseTeacher) *CourseUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCourseTeacherIDs(ids...)
}

// ClearCourseInfo clears all "course_info" edges to the CourseInfo entity.
func (cuo *CourseUpdateOne) ClearCourseInfo() *CourseUpdateOne {
	cuo.mutation.ClearCourseInfo()
	return cuo
}

// RemoveCourseInfoIDs removes the "course_info" edge to CourseInfo entities by IDs.
func (cuo *CourseUpdateOne) RemoveCourseInfoIDs(ids ...int) *CourseUpdateOne {
	cuo.mutation.RemoveCourseInfoIDs(ids...)
	return cuo
}

// RemoveCourseInfo removes "course_info" edges to CourseInfo entities.
func (cuo *CourseUpdateOne) RemoveCourseInfo(c ...*CourseInfo) *CourseUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCourseInfoIDs(ids...)
}

// ClearCourseChapter clears all "course_chapter" edges to the CourseChapter entity.
func (cuo *CourseUpdateOne) ClearCourseChapter() *CourseUpdateOne {
	cuo.mutation.ClearCourseChapter()
	return cuo
}

// RemoveCourseChapterIDs removes the "course_chapter" edge to CourseChapter entities by IDs.
func (cuo *CourseUpdateOne) RemoveCourseChapterIDs(ids ...int) *CourseUpdateOne {
	cuo.mutation.RemoveCourseChapterIDs(ids...)
	return cuo
}

// RemoveCourseChapter removes "course_chapter" edges to CourseChapter entities.
func (cuo *CourseUpdateOne) RemoveCourseChapter(c ...*CourseChapter) *CourseUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCourseChapterIDs(ids...)
}

// ClearCourseSection clears all "course_section" edges to the CourseSection entity.
func (cuo *CourseUpdateOne) ClearCourseSection() *CourseUpdateOne {
	cuo.mutation.ClearCourseSection()
	return cuo
}

// RemoveCourseSectionIDs removes the "course_section" edge to CourseSection entities by IDs.
func (cuo *CourseUpdateOne) RemoveCourseSectionIDs(ids ...int) *CourseUpdateOne {
	cuo.mutation.RemoveCourseSectionIDs(ids...)
	return cuo
}

// RemoveCourseSection removes "course_section" edges to CourseSection entities.
func (cuo *CourseUpdateOne) RemoveCourseSection(c ...*CourseSection) *CourseUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCourseSectionIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CourseUpdateOne) Select(field string, fields ...string) *CourseUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Course entity.
func (cuo *CourseUpdateOne) Save(ctx context.Context) (*Course, error) {
	var (
		err  error
		node *Course
	)
	cuo.defaults()
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CourseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Course)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CourseMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CourseUpdateOne) SaveX(ctx context.Context) *Course {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CourseUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CourseUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CourseUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := course.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CourseUpdateOne) check() error {
	if v, ok := cuo.mutation.Name(); ok {
		if err := course.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Course.name": %w`, err)}
		}
	}
	return nil
}

func (cuo *CourseUpdateOne) sqlSave(ctx context.Context) (_node *Course, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   course.Table,
			Columns: course.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: course.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Course.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, course.FieldID)
		for _, f := range fields {
			if !course.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != course.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: course.FieldName,
		})
	}
	if value, ok := cuo.mutation.Desc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: course.FieldDesc,
		})
	}
	if value, ok := cuo.mutation.BackgroundImage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: course.FieldBackgroundImage,
		})
	}
	if value, ok := cuo.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: course.FieldIsDeleted,
		})
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: course.FieldCreatedAt,
		})
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: course.FieldUpdatedAt,
		})
	}
	if value, ok := cuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: course.FieldDeletedAt,
		})
	}
	if cuo.mutation.CourseTeacherCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.CourseTeacherTable,
			Columns: []string{course.CourseTeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: courseteacher.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCourseTeacherIDs(); len(nodes) > 0 && !cuo.mutation.CourseTeacherCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.CourseTeacherTable,
			Columns: []string{course.CourseTeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: courseteacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CourseTeacherIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.CourseTeacherTable,
			Columns: []string{course.CourseTeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: courseteacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CourseInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.CourseInfoTable,
			Columns: []string{course.CourseInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: courseinfo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCourseInfoIDs(); len(nodes) > 0 && !cuo.mutation.CourseInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.CourseInfoTable,
			Columns: []string{course.CourseInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: courseinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CourseInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.CourseInfoTable,
			Columns: []string{course.CourseInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: courseinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CourseChapterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.CourseChapterTable,
			Columns: []string{course.CourseChapterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: coursechapter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCourseChapterIDs(); len(nodes) > 0 && !cuo.mutation.CourseChapterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.CourseChapterTable,
			Columns: []string{course.CourseChapterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: coursechapter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CourseChapterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.CourseChapterTable,
			Columns: []string{course.CourseChapterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: coursechapter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CourseSectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.CourseSectionTable,
			Columns: []string{course.CourseSectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: coursesection.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCourseSectionIDs(); len(nodes) > 0 && !cuo.mutation.CourseSectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.CourseSectionTable,
			Columns: []string{course.CourseSectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: coursesection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CourseSectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.CourseSectionTable,
			Columns: []string{course.CourseSectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: coursesection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Course{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{course.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
