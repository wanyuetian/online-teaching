// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"online-teaching/internal/ent/course"
	"online-teaching/internal/ent/coursechapter"
	"online-teaching/internal/ent/courseinfo"
	"online-teaching/internal/ent/coursesection"
	"online-teaching/internal/ent/courseswiper"
	"online-teaching/internal/ent/predicate"
	"online-teaching/internal/ent/teacher"
	"online-teaching/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CourseUpdate is the builder for updating Course entities.
type CourseUpdate struct {
	config
	hooks    []Hook
	mutation *CourseMutation
}

// Where appends a list predicates to the CourseUpdate builder.
func (cu *CourseUpdate) Where(ps ...predicate.Course) *CourseUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *CourseUpdate) SetName(s string) *CourseUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetDesc sets the "desc" field.
func (cu *CourseUpdate) SetDesc(s string) *CourseUpdate {
	cu.mutation.SetDesc(s)
	return cu
}

// SetImage sets the "image" field.
func (cu *CourseUpdate) SetImage(s string) *CourseUpdate {
	cu.mutation.SetImage(s)
	return cu
}

// SetTags sets the "tags" field.
func (cu *CourseUpdate) SetTags(s string) *CourseUpdate {
	cu.mutation.SetTags(s)
	return cu
}

// SetClassification sets the "classification" field.
func (cu *CourseUpdate) SetClassification(s string) *CourseUpdate {
	cu.mutation.SetClassification(s)
	return cu
}

// SetIsDeleted sets the "is_deleted" field.
func (cu *CourseUpdate) SetIsDeleted(b bool) *CourseUpdate {
	cu.mutation.SetIsDeleted(b)
	return cu
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (cu *CourseUpdate) SetNillableIsDeleted(b *bool) *CourseUpdate {
	if b != nil {
		cu.SetIsDeleted(*b)
	}
	return cu
}

// SetCreatedAt sets the "created_at" field.
func (cu *CourseUpdate) SetCreatedAt(t time.Time) *CourseUpdate {
	cu.mutation.SetCreatedAt(t)
	return cu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cu *CourseUpdate) SetNillableCreatedAt(t *time.Time) *CourseUpdate {
	if t != nil {
		cu.SetCreatedAt(*t)
	}
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CourseUpdate) SetUpdatedAt(t time.Time) *CourseUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// AddTeacherIDs adds the "teachers" edge to the Teacher entity by IDs.
func (cu *CourseUpdate) AddTeacherIDs(ids ...int) *CourseUpdate {
	cu.mutation.AddTeacherIDs(ids...)
	return cu
}

// AddTeachers adds the "teachers" edges to the Teacher entity.
func (cu *CourseUpdate) AddTeachers(t ...*Teacher) *CourseUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.AddTeacherIDs(ids...)
}

// AddInfoIDs adds the "infos" edge to the CourseInfo entity by IDs.
func (cu *CourseUpdate) AddInfoIDs(ids ...int) *CourseUpdate {
	cu.mutation.AddInfoIDs(ids...)
	return cu
}

// AddInfos adds the "infos" edges to the CourseInfo entity.
func (cu *CourseUpdate) AddInfos(c ...*CourseInfo) *CourseUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddInfoIDs(ids...)
}

// AddChapterIDs adds the "chapters" edge to the CourseChapter entity by IDs.
func (cu *CourseUpdate) AddChapterIDs(ids ...int) *CourseUpdate {
	cu.mutation.AddChapterIDs(ids...)
	return cu
}

// AddChapters adds the "chapters" edges to the CourseChapter entity.
func (cu *CourseUpdate) AddChapters(c ...*CourseChapter) *CourseUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddChapterIDs(ids...)
}

// AddSectionIDs adds the "sections" edge to the CourseSection entity by IDs.
func (cu *CourseUpdate) AddSectionIDs(ids ...int) *CourseUpdate {
	cu.mutation.AddSectionIDs(ids...)
	return cu
}

// AddSections adds the "sections" edges to the CourseSection entity.
func (cu *CourseUpdate) AddSections(c ...*CourseSection) *CourseUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddSectionIDs(ids...)
}

// AddSwiperIDs adds the "swipers" edge to the CourseSwiper entity by IDs.
func (cu *CourseUpdate) AddSwiperIDs(ids ...int) *CourseUpdate {
	cu.mutation.AddSwiperIDs(ids...)
	return cu
}

// AddSwipers adds the "swipers" edges to the CourseSwiper entity.
func (cu *CourseUpdate) AddSwipers(c ...*CourseSwiper) *CourseUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddSwiperIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (cu *CourseUpdate) AddUserIDs(ids ...int) *CourseUpdate {
	cu.mutation.AddUserIDs(ids...)
	return cu
}

// AddUsers adds the "users" edges to the User entity.
func (cu *CourseUpdate) AddUsers(u ...*User) *CourseUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cu.AddUserIDs(ids...)
}

// Mutation returns the CourseMutation object of the builder.
func (cu *CourseUpdate) Mutation() *CourseMutation {
	return cu.mutation
}

// ClearTeachers clears all "teachers" edges to the Teacher entity.
func (cu *CourseUpdate) ClearTeachers() *CourseUpdate {
	cu.mutation.ClearTeachers()
	return cu
}

// RemoveTeacherIDs removes the "teachers" edge to Teacher entities by IDs.
func (cu *CourseUpdate) RemoveTeacherIDs(ids ...int) *CourseUpdate {
	cu.mutation.RemoveTeacherIDs(ids...)
	return cu
}

// RemoveTeachers removes "teachers" edges to Teacher entities.
func (cu *CourseUpdate) RemoveTeachers(t ...*Teacher) *CourseUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.RemoveTeacherIDs(ids...)
}

// ClearInfos clears all "infos" edges to the CourseInfo entity.
func (cu *CourseUpdate) ClearInfos() *CourseUpdate {
	cu.mutation.ClearInfos()
	return cu
}

// RemoveInfoIDs removes the "infos" edge to CourseInfo entities by IDs.
func (cu *CourseUpdate) RemoveInfoIDs(ids ...int) *CourseUpdate {
	cu.mutation.RemoveInfoIDs(ids...)
	return cu
}

// RemoveInfos removes "infos" edges to CourseInfo entities.
func (cu *CourseUpdate) RemoveInfos(c ...*CourseInfo) *CourseUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveInfoIDs(ids...)
}

// ClearChapters clears all "chapters" edges to the CourseChapter entity.
func (cu *CourseUpdate) ClearChapters() *CourseUpdate {
	cu.mutation.ClearChapters()
	return cu
}

// RemoveChapterIDs removes the "chapters" edge to CourseChapter entities by IDs.
func (cu *CourseUpdate) RemoveChapterIDs(ids ...int) *CourseUpdate {
	cu.mutation.RemoveChapterIDs(ids...)
	return cu
}

// RemoveChapters removes "chapters" edges to CourseChapter entities.
func (cu *CourseUpdate) RemoveChapters(c ...*CourseChapter) *CourseUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveChapterIDs(ids...)
}

// ClearSections clears all "sections" edges to the CourseSection entity.
func (cu *CourseUpdate) ClearSections() *CourseUpdate {
	cu.mutation.ClearSections()
	return cu
}

// RemoveSectionIDs removes the "sections" edge to CourseSection entities by IDs.
func (cu *CourseUpdate) RemoveSectionIDs(ids ...int) *CourseUpdate {
	cu.mutation.RemoveSectionIDs(ids...)
	return cu
}

// RemoveSections removes "sections" edges to CourseSection entities.
func (cu *CourseUpdate) RemoveSections(c ...*CourseSection) *CourseUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveSectionIDs(ids...)
}

// ClearSwipers clears all "swipers" edges to the CourseSwiper entity.
func (cu *CourseUpdate) ClearSwipers() *CourseUpdate {
	cu.mutation.ClearSwipers()
	return cu
}

// RemoveSwiperIDs removes the "swipers" edge to CourseSwiper entities by IDs.
func (cu *CourseUpdate) RemoveSwiperIDs(ids ...int) *CourseUpdate {
	cu.mutation.RemoveSwiperIDs(ids...)
	return cu
}

// RemoveSwipers removes "swipers" edges to CourseSwiper entities.
func (cu *CourseUpdate) RemoveSwipers(c ...*CourseSwiper) *CourseUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveSwiperIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (cu *CourseUpdate) ClearUsers() *CourseUpdate {
	cu.mutation.ClearUsers()
	return cu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (cu *CourseUpdate) RemoveUserIDs(ids ...int) *CourseUpdate {
	cu.mutation.RemoveUserIDs(ids...)
	return cu
}

// RemoveUsers removes "users" edges to User entities.
func (cu *CourseUpdate) RemoveUsers(u ...*User) *CourseUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cu.RemoveUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CourseUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cu.defaults()
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CourseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CourseUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CourseUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CourseUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CourseUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := course.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CourseUpdate) check() error {
	if v, ok := cu.mutation.Name(); ok {
		if err := course.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Course.name": %w`, err)}
		}
	}
	return nil
}

func (cu *CourseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   course.Table,
			Columns: course.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: course.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: course.FieldName,
		})
	}
	if value, ok := cu.mutation.Desc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: course.FieldDesc,
		})
	}
	if value, ok := cu.mutation.Image(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: course.FieldImage,
		})
	}
	if value, ok := cu.mutation.Tags(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: course.FieldTags,
		})
	}
	if value, ok := cu.mutation.Classification(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: course.FieldClassification,
		})
	}
	if value, ok := cu.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: course.FieldIsDeleted,
		})
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: course.FieldCreatedAt,
		})
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: course.FieldUpdatedAt,
		})
	}
	if cu.mutation.TeachersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   course.TeachersTable,
			Columns: course.TeachersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teacher.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedTeachersIDs(); len(nodes) > 0 && !cu.mutation.TeachersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   course.TeachersTable,
			Columns: course.TeachersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.TeachersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   course.TeachersTable,
			Columns: course.TeachersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.InfosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.InfosTable,
			Columns: []string{course.InfosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: courseinfo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedInfosIDs(); len(nodes) > 0 && !cu.mutation.InfosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.InfosTable,
			Columns: []string{course.InfosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: courseinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.InfosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.InfosTable,
			Columns: []string{course.InfosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: courseinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ChaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.ChaptersTable,
			Columns: []string{course.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: coursechapter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedChaptersIDs(); len(nodes) > 0 && !cu.mutation.ChaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.ChaptersTable,
			Columns: []string{course.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: coursechapter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ChaptersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.ChaptersTable,
			Columns: []string{course.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: coursechapter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.SectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.SectionsTable,
			Columns: []string{course.SectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: coursesection.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedSectionsIDs(); len(nodes) > 0 && !cu.mutation.SectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.SectionsTable,
			Columns: []string{course.SectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: coursesection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.SectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.SectionsTable,
			Columns: []string{course.SectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: coursesection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.SwipersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.SwipersTable,
			Columns: []string{course.SwipersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: courseswiper.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedSwipersIDs(); len(nodes) > 0 && !cu.mutation.SwipersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.SwipersTable,
			Columns: []string{course.SwipersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: courseswiper.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.SwipersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.SwipersTable,
			Columns: []string{course.SwipersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: courseswiper.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   course.UsersTable,
			Columns: course.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !cu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   course.UsersTable,
			Columns: course.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   course.UsersTable,
			Columns: course.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{course.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CourseUpdateOne is the builder for updating a single Course entity.
type CourseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CourseMutation
}

// SetName sets the "name" field.
func (cuo *CourseUpdateOne) SetName(s string) *CourseUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetDesc sets the "desc" field.
func (cuo *CourseUpdateOne) SetDesc(s string) *CourseUpdateOne {
	cuo.mutation.SetDesc(s)
	return cuo
}

// SetImage sets the "image" field.
func (cuo *CourseUpdateOne) SetImage(s string) *CourseUpdateOne {
	cuo.mutation.SetImage(s)
	return cuo
}

// SetTags sets the "tags" field.
func (cuo *CourseUpdateOne) SetTags(s string) *CourseUpdateOne {
	cuo.mutation.SetTags(s)
	return cuo
}

// SetClassification sets the "classification" field.
func (cuo *CourseUpdateOne) SetClassification(s string) *CourseUpdateOne {
	cuo.mutation.SetClassification(s)
	return cuo
}

// SetIsDeleted sets the "is_deleted" field.
func (cuo *CourseUpdateOne) SetIsDeleted(b bool) *CourseUpdateOne {
	cuo.mutation.SetIsDeleted(b)
	return cuo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (cuo *CourseUpdateOne) SetNillableIsDeleted(b *bool) *CourseUpdateOne {
	if b != nil {
		cuo.SetIsDeleted(*b)
	}
	return cuo
}

// SetCreatedAt sets the "created_at" field.
func (cuo *CourseUpdateOne) SetCreatedAt(t time.Time) *CourseUpdateOne {
	cuo.mutation.SetCreatedAt(t)
	return cuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cuo *CourseUpdateOne) SetNillableCreatedAt(t *time.Time) *CourseUpdateOne {
	if t != nil {
		cuo.SetCreatedAt(*t)
	}
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CourseUpdateOne) SetUpdatedAt(t time.Time) *CourseUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// AddTeacherIDs adds the "teachers" edge to the Teacher entity by IDs.
func (cuo *CourseUpdateOne) AddTeacherIDs(ids ...int) *CourseUpdateOne {
	cuo.mutation.AddTeacherIDs(ids...)
	return cuo
}

// AddTeachers adds the "teachers" edges to the Teacher entity.
func (cuo *CourseUpdateOne) AddTeachers(t ...*Teacher) *CourseUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.AddTeacherIDs(ids...)
}

// AddInfoIDs adds the "infos" edge to the CourseInfo entity by IDs.
func (cuo *CourseUpdateOne) AddInfoIDs(ids ...int) *CourseUpdateOne {
	cuo.mutation.AddInfoIDs(ids...)
	return cuo
}

// AddInfos adds the "infos" edges to the CourseInfo entity.
func (cuo *CourseUpdateOne) AddInfos(c ...*CourseInfo) *CourseUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddInfoIDs(ids...)
}

// AddChapterIDs adds the "chapters" edge to the CourseChapter entity by IDs.
func (cuo *CourseUpdateOne) AddChapterIDs(ids ...int) *CourseUpdateOne {
	cuo.mutation.AddChapterIDs(ids...)
	return cuo
}

// AddChapters adds the "chapters" edges to the CourseChapter entity.
func (cuo *CourseUpdateOne) AddChapters(c ...*CourseChapter) *CourseUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddChapterIDs(ids...)
}

// AddSectionIDs adds the "sections" edge to the CourseSection entity by IDs.
func (cuo *CourseUpdateOne) AddSectionIDs(ids ...int) *CourseUpdateOne {
	cuo.mutation.AddSectionIDs(ids...)
	return cuo
}

// AddSections adds the "sections" edges to the CourseSection entity.
func (cuo *CourseUpdateOne) AddSections(c ...*CourseSection) *CourseUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddSectionIDs(ids...)
}

// AddSwiperIDs adds the "swipers" edge to the CourseSwiper entity by IDs.
func (cuo *CourseUpdateOne) AddSwiperIDs(ids ...int) *CourseUpdateOne {
	cuo.mutation.AddSwiperIDs(ids...)
	return cuo
}

// AddSwipers adds the "swipers" edges to the CourseSwiper entity.
func (cuo *CourseUpdateOne) AddSwipers(c ...*CourseSwiper) *CourseUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddSwiperIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (cuo *CourseUpdateOne) AddUserIDs(ids ...int) *CourseUpdateOne {
	cuo.mutation.AddUserIDs(ids...)
	return cuo
}

// AddUsers adds the "users" edges to the User entity.
func (cuo *CourseUpdateOne) AddUsers(u ...*User) *CourseUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cuo.AddUserIDs(ids...)
}

// Mutation returns the CourseMutation object of the builder.
func (cuo *CourseUpdateOne) Mutation() *CourseMutation {
	return cuo.mutation
}

// ClearTeachers clears all "teachers" edges to the Teacher entity.
func (cuo *CourseUpdateOne) ClearTeachers() *CourseUpdateOne {
	cuo.mutation.ClearTeachers()
	return cuo
}

// RemoveTeacherIDs removes the "teachers" edge to Teacher entities by IDs.
func (cuo *CourseUpdateOne) RemoveTeacherIDs(ids ...int) *CourseUpdateOne {
	cuo.mutation.RemoveTeacherIDs(ids...)
	return cuo
}

// RemoveTeachers removes "teachers" edges to Teacher entities.
func (cuo *CourseUpdateOne) RemoveTeachers(t ...*Teacher) *CourseUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.RemoveTeacherIDs(ids...)
}

// ClearInfos clears all "infos" edges to the CourseInfo entity.
func (cuo *CourseUpdateOne) ClearInfos() *CourseUpdateOne {
	cuo.mutation.ClearInfos()
	return cuo
}

// RemoveInfoIDs removes the "infos" edge to CourseInfo entities by IDs.
func (cuo *CourseUpdateOne) RemoveInfoIDs(ids ...int) *CourseUpdateOne {
	cuo.mutation.RemoveInfoIDs(ids...)
	return cuo
}

// RemoveInfos removes "infos" edges to CourseInfo entities.
func (cuo *CourseUpdateOne) RemoveInfos(c ...*CourseInfo) *CourseUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveInfoIDs(ids...)
}

// ClearChapters clears all "chapters" edges to the CourseChapter entity.
func (cuo *CourseUpdateOne) ClearChapters() *CourseUpdateOne {
	cuo.mutation.ClearChapters()
	return cuo
}

// RemoveChapterIDs removes the "chapters" edge to CourseChapter entities by IDs.
func (cuo *CourseUpdateOne) RemoveChapterIDs(ids ...int) *CourseUpdateOne {
	cuo.mutation.RemoveChapterIDs(ids...)
	return cuo
}

// RemoveChapters removes "chapters" edges to CourseChapter entities.
func (cuo *CourseUpdateOne) RemoveChapters(c ...*CourseChapter) *CourseUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveChapterIDs(ids...)
}

// ClearSections clears all "sections" edges to the CourseSection entity.
func (cuo *CourseUpdateOne) ClearSections() *CourseUpdateOne {
	cuo.mutation.ClearSections()
	return cuo
}

// RemoveSectionIDs removes the "sections" edge to CourseSection entities by IDs.
func (cuo *CourseUpdateOne) RemoveSectionIDs(ids ...int) *CourseUpdateOne {
	cuo.mutation.RemoveSectionIDs(ids...)
	return cuo
}

// RemoveSections removes "sections" edges to CourseSection entities.
func (cuo *CourseUpdateOne) RemoveSections(c ...*CourseSection) *CourseUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveSectionIDs(ids...)
}

// ClearSwipers clears all "swipers" edges to the CourseSwiper entity.
func (cuo *CourseUpdateOne) ClearSwipers() *CourseUpdateOne {
	cuo.mutation.ClearSwipers()
	return cuo
}

// RemoveSwiperIDs removes the "swipers" edge to CourseSwiper entities by IDs.
func (cuo *CourseUpdateOne) RemoveSwiperIDs(ids ...int) *CourseUpdateOne {
	cuo.mutation.RemoveSwiperIDs(ids...)
	return cuo
}

// RemoveSwipers removes "swipers" edges to CourseSwiper entities.
func (cuo *CourseUpdateOne) RemoveSwipers(c ...*CourseSwiper) *CourseUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveSwiperIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (cuo *CourseUpdateOne) ClearUsers() *CourseUpdateOne {
	cuo.mutation.ClearUsers()
	return cuo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (cuo *CourseUpdateOne) RemoveUserIDs(ids ...int) *CourseUpdateOne {
	cuo.mutation.RemoveUserIDs(ids...)
	return cuo
}

// RemoveUsers removes "users" edges to User entities.
func (cuo *CourseUpdateOne) RemoveUsers(u ...*User) *CourseUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cuo.RemoveUserIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CourseUpdateOne) Select(field string, fields ...string) *CourseUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Course entity.
func (cuo *CourseUpdateOne) Save(ctx context.Context) (*Course, error) {
	var (
		err  error
		node *Course
	)
	cuo.defaults()
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CourseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Course)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CourseMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CourseUpdateOne) SaveX(ctx context.Context) *Course {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CourseUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CourseUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CourseUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := course.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CourseUpdateOne) check() error {
	if v, ok := cuo.mutation.Name(); ok {
		if err := course.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Course.name": %w`, err)}
		}
	}
	return nil
}

func (cuo *CourseUpdateOne) sqlSave(ctx context.Context) (_node *Course, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   course.Table,
			Columns: course.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: course.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Course.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, course.FieldID)
		for _, f := range fields {
			if !course.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != course.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: course.FieldName,
		})
	}
	if value, ok := cuo.mutation.Desc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: course.FieldDesc,
		})
	}
	if value, ok := cuo.mutation.Image(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: course.FieldImage,
		})
	}
	if value, ok := cuo.mutation.Tags(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: course.FieldTags,
		})
	}
	if value, ok := cuo.mutation.Classification(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: course.FieldClassification,
		})
	}
	if value, ok := cuo.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: course.FieldIsDeleted,
		})
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: course.FieldCreatedAt,
		})
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: course.FieldUpdatedAt,
		})
	}
	if cuo.mutation.TeachersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   course.TeachersTable,
			Columns: course.TeachersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teacher.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedTeachersIDs(); len(nodes) > 0 && !cuo.mutation.TeachersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   course.TeachersTable,
			Columns: course.TeachersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.TeachersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   course.TeachersTable,
			Columns: course.TeachersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.InfosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.InfosTable,
			Columns: []string{course.InfosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: courseinfo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedInfosIDs(); len(nodes) > 0 && !cuo.mutation.InfosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.InfosTable,
			Columns: []string{course.InfosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: courseinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.InfosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.InfosTable,
			Columns: []string{course.InfosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: courseinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ChaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.ChaptersTable,
			Columns: []string{course.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: coursechapter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedChaptersIDs(); len(nodes) > 0 && !cuo.mutation.ChaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.ChaptersTable,
			Columns: []string{course.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: coursechapter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ChaptersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.ChaptersTable,
			Columns: []string{course.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: coursechapter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.SectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.SectionsTable,
			Columns: []string{course.SectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: coursesection.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedSectionsIDs(); len(nodes) > 0 && !cuo.mutation.SectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.SectionsTable,
			Columns: []string{course.SectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: coursesection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.SectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.SectionsTable,
			Columns: []string{course.SectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: coursesection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.SwipersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.SwipersTable,
			Columns: []string{course.SwipersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: courseswiper.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedSwipersIDs(); len(nodes) > 0 && !cuo.mutation.SwipersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.SwipersTable,
			Columns: []string{course.SwipersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: courseswiper.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.SwipersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.SwipersTable,
			Columns: []string{course.SwipersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: courseswiper.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   course.UsersTable,
			Columns: course.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !cuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   course.UsersTable,
			Columns: course.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   course.UsersTable,
			Columns: course.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Course{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{course.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
