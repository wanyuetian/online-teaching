// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"online-teaching/internal/ent/courseteacher"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// CourseTeacher is the model entity for the CourseTeacher schema.
type CourseTeacher struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Desc holds the value of the "desc" field.
	Desc string `json:"desc,omitempty"`
	// Avatar holds the value of the "avatar" field.
	Avatar string `json:"avatar,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// IsDeleted holds the value of the "is_deleted" field.
	IsDeleted bool `json:"is_deleted,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CourseTeacherQuery when eager-loading is set.
	Edges                 CourseTeacherEdges `json:"edges"`
	course_course_teacher *int
}

// CourseTeacherEdges holds the relations/edges for other nodes in the graph.
type CourseTeacherEdges struct {
	// Course holds the value of the course edge.
	Course []*Course `json:"course,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CourseOrErr returns the Course value or an error if the edge
// was not loaded in eager-loading.
func (e CourseTeacherEdges) CourseOrErr() ([]*Course, error) {
	if e.loadedTypes[0] {
		return e.Course, nil
	}
	return nil, &NotLoadedError{edge: "course"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CourseTeacher) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case courseteacher.FieldIsDeleted:
			values[i] = new(sql.NullBool)
		case courseteacher.FieldID:
			values[i] = new(sql.NullInt64)
		case courseteacher.FieldName, courseteacher.FieldDesc, courseteacher.FieldAvatar, courseteacher.FieldTitle:
			values[i] = new(sql.NullString)
		case courseteacher.FieldCreatedAt, courseteacher.FieldUpdatedAt, courseteacher.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case courseteacher.ForeignKeys[0]: // course_course_teacher
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CourseTeacher", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CourseTeacher fields.
func (ct *CourseTeacher) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case courseteacher.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ct.ID = int(value.Int64)
		case courseteacher.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ct.Name = value.String
			}
		case courseteacher.FieldDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value.Valid {
				ct.Desc = value.String
			}
		case courseteacher.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				ct.Avatar = value.String
			}
		case courseteacher.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				ct.Title = value.String
			}
		case courseteacher.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				ct.IsDeleted = value.Bool
			}
		case courseteacher.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ct.CreatedAt = value.Time
			}
		case courseteacher.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ct.UpdatedAt = value.Time
			}
		case courseteacher.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ct.DeletedAt = value.Time
			}
		case courseteacher.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field course_course_teacher", value)
			} else if value.Valid {
				ct.course_course_teacher = new(int)
				*ct.course_course_teacher = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryCourse queries the "course" edge of the CourseTeacher entity.
func (ct *CourseTeacher) QueryCourse() *CourseQuery {
	return (&CourseTeacherClient{config: ct.config}).QueryCourse(ct)
}

// Update returns a builder for updating this CourseTeacher.
// Note that you need to call CourseTeacher.Unwrap() before calling this method if this CourseTeacher
// was returned from a transaction, and the transaction was committed or rolled back.
func (ct *CourseTeacher) Update() *CourseTeacherUpdateOne {
	return (&CourseTeacherClient{config: ct.config}).UpdateOne(ct)
}

// Unwrap unwraps the CourseTeacher entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ct *CourseTeacher) Unwrap() *CourseTeacher {
	_tx, ok := ct.config.driver.(*txDriver)
	if !ok {
		panic("ent: CourseTeacher is not a transactional entity")
	}
	ct.config.driver = _tx.drv
	return ct
}

// String implements the fmt.Stringer.
func (ct *CourseTeacher) String() string {
	var builder strings.Builder
	builder.WriteString("CourseTeacher(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ct.ID))
	builder.WriteString("name=")
	builder.WriteString(ct.Name)
	builder.WriteString(", ")
	builder.WriteString("desc=")
	builder.WriteString(ct.Desc)
	builder.WriteString(", ")
	builder.WriteString("avatar=")
	builder.WriteString(ct.Avatar)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(ct.Title)
	builder.WriteString(", ")
	builder.WriteString("is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", ct.IsDeleted))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ct.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ct.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(ct.DeletedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CourseTeachers is a parsable slice of CourseTeacher.
type CourseTeachers []*CourseTeacher

func (ct CourseTeachers) config(cfg config) {
	for _i := range ct {
		ct[_i].config = cfg
	}
}
