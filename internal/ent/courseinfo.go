// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"online-teaching/internal/ent/courseinfo"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// CourseInfo is the model entity for the CourseInfo schema.
type CourseInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ClickCount holds the value of the "click_count" field.
	ClickCount int `json:"click_count,omitempty"`
	// LearnCount holds the value of the "learn_count" field.
	LearnCount int `json:"learn_count,omitempty"`
	// TotalDuration holds the value of the "total_duration" field.
	TotalDuration int `json:"total_duration,omitempty"`
	// SectionCount holds the value of the "section_count" field.
	SectionCount int `json:"section_count,omitempty"`
	// Price holds the value of the "price" field.
	Price float64 `json:"price,omitempty"`
	// Detail holds the value of the "detail" field.
	Detail string `json:"detail,omitempty"`
	// State holds the value of the "state" field.
	State string `json:"state,omitempty"`
	// IsDeleted holds the value of the "is_deleted" field.
	IsDeleted bool `json:"is_deleted,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt          time.Time `json:"deleted_at,omitempty"`
	course_course_info *int
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CourseInfo) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case courseinfo.FieldIsDeleted:
			values[i] = new(sql.NullBool)
		case courseinfo.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case courseinfo.FieldID, courseinfo.FieldClickCount, courseinfo.FieldLearnCount, courseinfo.FieldTotalDuration, courseinfo.FieldSectionCount:
			values[i] = new(sql.NullInt64)
		case courseinfo.FieldDetail, courseinfo.FieldState:
			values[i] = new(sql.NullString)
		case courseinfo.FieldCreatedAt, courseinfo.FieldUpdatedAt, courseinfo.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case courseinfo.ForeignKeys[0]: // course_course_info
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CourseInfo", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CourseInfo fields.
func (ci *CourseInfo) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case courseinfo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ci.ID = int(value.Int64)
		case courseinfo.FieldClickCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field click_count", values[i])
			} else if value.Valid {
				ci.ClickCount = int(value.Int64)
			}
		case courseinfo.FieldLearnCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field learn_count", values[i])
			} else if value.Valid {
				ci.LearnCount = int(value.Int64)
			}
		case courseinfo.FieldTotalDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_duration", values[i])
			} else if value.Valid {
				ci.TotalDuration = int(value.Int64)
			}
		case courseinfo.FieldSectionCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field section_count", values[i])
			} else if value.Valid {
				ci.SectionCount = int(value.Int64)
			}
		case courseinfo.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				ci.Price = value.Float64
			}
		case courseinfo.FieldDetail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field detail", values[i])
			} else if value.Valid {
				ci.Detail = value.String
			}
		case courseinfo.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				ci.State = value.String
			}
		case courseinfo.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				ci.IsDeleted = value.Bool
			}
		case courseinfo.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ci.CreatedAt = value.Time
			}
		case courseinfo.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ci.UpdatedAt = value.Time
			}
		case courseinfo.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ci.DeletedAt = value.Time
			}
		case courseinfo.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field course_course_info", value)
			} else if value.Valid {
				ci.course_course_info = new(int)
				*ci.course_course_info = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this CourseInfo.
// Note that you need to call CourseInfo.Unwrap() before calling this method if this CourseInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (ci *CourseInfo) Update() *CourseInfoUpdateOne {
	return (&CourseInfoClient{config: ci.config}).UpdateOne(ci)
}

// Unwrap unwraps the CourseInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ci *CourseInfo) Unwrap() *CourseInfo {
	_tx, ok := ci.config.driver.(*txDriver)
	if !ok {
		panic("ent: CourseInfo is not a transactional entity")
	}
	ci.config.driver = _tx.drv
	return ci
}

// String implements the fmt.Stringer.
func (ci *CourseInfo) String() string {
	var builder strings.Builder
	builder.WriteString("CourseInfo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ci.ID))
	builder.WriteString("click_count=")
	builder.WriteString(fmt.Sprintf("%v", ci.ClickCount))
	builder.WriteString(", ")
	builder.WriteString("learn_count=")
	builder.WriteString(fmt.Sprintf("%v", ci.LearnCount))
	builder.WriteString(", ")
	builder.WriteString("total_duration=")
	builder.WriteString(fmt.Sprintf("%v", ci.TotalDuration))
	builder.WriteString(", ")
	builder.WriteString("section_count=")
	builder.WriteString(fmt.Sprintf("%v", ci.SectionCount))
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", ci.Price))
	builder.WriteString(", ")
	builder.WriteString("detail=")
	builder.WriteString(ci.Detail)
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(ci.State)
	builder.WriteString(", ")
	builder.WriteString("is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", ci.IsDeleted))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ci.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ci.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(ci.DeletedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CourseInfos is a parsable slice of CourseInfo.
type CourseInfos []*CourseInfo

func (ci CourseInfos) config(cfg config) {
	for _i := range ci {
		ci[_i].config = cfg
	}
}
