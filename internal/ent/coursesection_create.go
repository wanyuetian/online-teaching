// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"online-teaching/internal/ent/coursesection"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CourseSectionCreate is the builder for creating a CourseSection entity.
type CourseSectionCreate struct {
	config
	mutation *CourseSectionMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (csc *CourseSectionCreate) SetTitle(s string) *CourseSectionCreate {
	csc.mutation.SetTitle(s)
	return csc
}

// SetType sets the "type" field.
func (csc *CourseSectionCreate) SetType(s string) *CourseSectionCreate {
	csc.mutation.SetType(s)
	return csc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (csc *CourseSectionCreate) SetNillableType(s *string) *CourseSectionCreate {
	if s != nil {
		csc.SetType(*s)
	}
	return csc
}

// SetVideo sets the "video" field.
func (csc *CourseSectionCreate) SetVideo(s string) *CourseSectionCreate {
	csc.mutation.SetVideo(s)
	return csc
}

// SetIsDeleted sets the "is_deleted" field.
func (csc *CourseSectionCreate) SetIsDeleted(b bool) *CourseSectionCreate {
	csc.mutation.SetIsDeleted(b)
	return csc
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (csc *CourseSectionCreate) SetNillableIsDeleted(b *bool) *CourseSectionCreate {
	if b != nil {
		csc.SetIsDeleted(*b)
	}
	return csc
}

// SetCreatedAt sets the "created_at" field.
func (csc *CourseSectionCreate) SetCreatedAt(t time.Time) *CourseSectionCreate {
	csc.mutation.SetCreatedAt(t)
	return csc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (csc *CourseSectionCreate) SetNillableCreatedAt(t *time.Time) *CourseSectionCreate {
	if t != nil {
		csc.SetCreatedAt(*t)
	}
	return csc
}

// SetUpdatedAt sets the "updated_at" field.
func (csc *CourseSectionCreate) SetUpdatedAt(t time.Time) *CourseSectionCreate {
	csc.mutation.SetUpdatedAt(t)
	return csc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (csc *CourseSectionCreate) SetNillableUpdatedAt(t *time.Time) *CourseSectionCreate {
	if t != nil {
		csc.SetUpdatedAt(*t)
	}
	return csc
}

// Mutation returns the CourseSectionMutation object of the builder.
func (csc *CourseSectionCreate) Mutation() *CourseSectionMutation {
	return csc.mutation
}

// Save creates the CourseSection in the database.
func (csc *CourseSectionCreate) Save(ctx context.Context) (*CourseSection, error) {
	var (
		err  error
		node *CourseSection
	)
	csc.defaults()
	if len(csc.hooks) == 0 {
		if err = csc.check(); err != nil {
			return nil, err
		}
		node, err = csc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CourseSectionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = csc.check(); err != nil {
				return nil, err
			}
			csc.mutation = mutation
			if node, err = csc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(csc.hooks) - 1; i >= 0; i-- {
			if csc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = csc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, csc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CourseSection)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CourseSectionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (csc *CourseSectionCreate) SaveX(ctx context.Context) *CourseSection {
	v, err := csc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (csc *CourseSectionCreate) Exec(ctx context.Context) error {
	_, err := csc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csc *CourseSectionCreate) ExecX(ctx context.Context) {
	if err := csc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csc *CourseSectionCreate) defaults() {
	if _, ok := csc.mutation.GetType(); !ok {
		v := coursesection.DefaultType
		csc.mutation.SetType(v)
	}
	if _, ok := csc.mutation.IsDeleted(); !ok {
		v := coursesection.DefaultIsDeleted
		csc.mutation.SetIsDeleted(v)
	}
	if _, ok := csc.mutation.CreatedAt(); !ok {
		v := coursesection.DefaultCreatedAt()
		csc.mutation.SetCreatedAt(v)
	}
	if _, ok := csc.mutation.UpdatedAt(); !ok {
		v := coursesection.DefaultUpdatedAt()
		csc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csc *CourseSectionCreate) check() error {
	if _, ok := csc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "CourseSection.title"`)}
	}
	if v, ok := csc.mutation.Title(); ok {
		if err := coursesection.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "CourseSection.title": %w`, err)}
		}
	}
	if _, ok := csc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "CourseSection.type"`)}
	}
	if _, ok := csc.mutation.Video(); !ok {
		return &ValidationError{Name: "video", err: errors.New(`ent: missing required field "CourseSection.video"`)}
	}
	if _, ok := csc.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New(`ent: missing required field "CourseSection.is_deleted"`)}
	}
	if _, ok := csc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CourseSection.created_at"`)}
	}
	if _, ok := csc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CourseSection.updated_at"`)}
	}
	return nil
}

func (csc *CourseSectionCreate) sqlSave(ctx context.Context) (*CourseSection, error) {
	_node, _spec := csc.createSpec()
	if err := sqlgraph.CreateNode(ctx, csc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (csc *CourseSectionCreate) createSpec() (*CourseSection, *sqlgraph.CreateSpec) {
	var (
		_node = &CourseSection{config: csc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: coursesection.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: coursesection.FieldID,
			},
		}
	)
	if value, ok := csc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coursesection.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := csc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coursesection.FieldType,
		})
		_node.Type = value
	}
	if value, ok := csc.mutation.Video(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coursesection.FieldVideo,
		})
		_node.Video = value
	}
	if value, ok := csc.mutation.IsDeleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: coursesection.FieldIsDeleted,
		})
		_node.IsDeleted = value
	}
	if value, ok := csc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: coursesection.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := csc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: coursesection.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// CourseSectionCreateBulk is the builder for creating many CourseSection entities in bulk.
type CourseSectionCreateBulk struct {
	config
	builders []*CourseSectionCreate
}

// Save creates the CourseSection entities in the database.
func (cscb *CourseSectionCreateBulk) Save(ctx context.Context) ([]*CourseSection, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cscb.builders))
	nodes := make([]*CourseSection, len(cscb.builders))
	mutators := make([]Mutator, len(cscb.builders))
	for i := range cscb.builders {
		func(i int, root context.Context) {
			builder := cscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CourseSectionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cscb *CourseSectionCreateBulk) SaveX(ctx context.Context) []*CourseSection {
	v, err := cscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cscb *CourseSectionCreateBulk) Exec(ctx context.Context) error {
	_, err := cscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cscb *CourseSectionCreateBulk) ExecX(ctx context.Context) {
	if err := cscb.Exec(ctx); err != nil {
		panic(err)
	}
}
