// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.0
// - protoc             v3.18.1
// source: teaching/v1/teacher.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationTeacherCreateTeacher = "/teaching.v1.Teacher/CreateTeacher"
const OperationTeacherDeleteTeacher = "/teaching.v1.Teacher/DeleteTeacher"
const OperationTeacherGetTeacher = "/teaching.v1.Teacher/GetTeacher"
const OperationTeacherSearchTeacher = "/teaching.v1.Teacher/SearchTeacher"
const OperationTeacherUpdateTeacher = "/teaching.v1.Teacher/UpdateTeacher"

type TeacherHTTPServer interface {
	CreateTeacher(context.Context, *CreateTeacherRequest) (*CreateTeacherReply, error)
	DeleteTeacher(context.Context, *DeleteTeacherRequest) (*DeleteTeacherReply, error)
	GetTeacher(context.Context, *GetTeacherRequest) (*GetTeacherReply, error)
	SearchTeacher(context.Context, *SearchTeachersRequest) (*SearchTeachersReply, error)
	UpdateTeacher(context.Context, *UpdateTeacherRequest) (*UpdateTeacherReply, error)
}

func RegisterTeacherHTTPServer(s *http.Server, srv TeacherHTTPServer) {
	r := s.Route("/")
	r.GET("/teaching/api/v1/teachers", _Teacher_SearchTeacher0_HTTP_Handler(srv))
	r.GET("/teaching/api/v1/teacher/{teacher_id}", _Teacher_GetTeacher0_HTTP_Handler(srv))
	r.DELETE("/teaching/api/v1/teacher/{teacher_id}", _Teacher_DeleteTeacher0_HTTP_Handler(srv))
	r.PUT("/teaching/api/v1/teacher", _Teacher_UpdateTeacher0_HTTP_Handler(srv))
	r.POST("/teaching/api/v1/teacher", _Teacher_CreateTeacher0_HTTP_Handler(srv))
}

func _Teacher_SearchTeacher0_HTTP_Handler(srv TeacherHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchTeachersRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTeacherSearchTeacher)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SearchTeacher(ctx, req.(*SearchTeachersRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchTeachersReply)
		return ctx.Result(200, reply)
	}
}

func _Teacher_GetTeacher0_HTTP_Handler(srv TeacherHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTeacherRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTeacherGetTeacher)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTeacher(ctx, req.(*GetTeacherRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTeacherReply)
		return ctx.Result(200, reply)
	}
}

func _Teacher_DeleteTeacher0_HTTP_Handler(srv TeacherHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteTeacherRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTeacherDeleteTeacher)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteTeacher(ctx, req.(*DeleteTeacherRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteTeacherReply)
		return ctx.Result(200, reply)
	}
}

func _Teacher_UpdateTeacher0_HTTP_Handler(srv TeacherHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateTeacherRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTeacherUpdateTeacher)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateTeacher(ctx, req.(*UpdateTeacherRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateTeacherReply)
		return ctx.Result(200, reply)
	}
}

func _Teacher_CreateTeacher0_HTTP_Handler(srv TeacherHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateTeacherRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTeacherCreateTeacher)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateTeacher(ctx, req.(*CreateTeacherRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateTeacherReply)
		return ctx.Result(200, reply)
	}
}

type TeacherHTTPClient interface {
	CreateTeacher(ctx context.Context, req *CreateTeacherRequest, opts ...http.CallOption) (rsp *CreateTeacherReply, err error)
	DeleteTeacher(ctx context.Context, req *DeleteTeacherRequest, opts ...http.CallOption) (rsp *DeleteTeacherReply, err error)
	GetTeacher(ctx context.Context, req *GetTeacherRequest, opts ...http.CallOption) (rsp *GetTeacherReply, err error)
	SearchTeacher(ctx context.Context, req *SearchTeachersRequest, opts ...http.CallOption) (rsp *SearchTeachersReply, err error)
	UpdateTeacher(ctx context.Context, req *UpdateTeacherRequest, opts ...http.CallOption) (rsp *UpdateTeacherReply, err error)
}

type TeacherHTTPClientImpl struct {
	cc *http.Client
}

func NewTeacherHTTPClient(client *http.Client) TeacherHTTPClient {
	return &TeacherHTTPClientImpl{client}
}

func (c *TeacherHTTPClientImpl) CreateTeacher(ctx context.Context, in *CreateTeacherRequest, opts ...http.CallOption) (*CreateTeacherReply, error) {
	var out CreateTeacherReply
	pattern := "/teaching/api/v1/teacher"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTeacherCreateTeacher))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TeacherHTTPClientImpl) DeleteTeacher(ctx context.Context, in *DeleteTeacherRequest, opts ...http.CallOption) (*DeleteTeacherReply, error) {
	var out DeleteTeacherReply
	pattern := "/teaching/api/v1/teacher/{teacher_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTeacherDeleteTeacher))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TeacherHTTPClientImpl) GetTeacher(ctx context.Context, in *GetTeacherRequest, opts ...http.CallOption) (*GetTeacherReply, error) {
	var out GetTeacherReply
	pattern := "/teaching/api/v1/teacher/{teacher_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTeacherGetTeacher))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TeacherHTTPClientImpl) SearchTeacher(ctx context.Context, in *SearchTeachersRequest, opts ...http.CallOption) (*SearchTeachersReply, error) {
	var out SearchTeachersReply
	pattern := "/teaching/api/v1/teachers"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTeacherSearchTeacher))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TeacherHTTPClientImpl) UpdateTeacher(ctx context.Context, in *UpdateTeacherRequest, opts ...http.CallOption) (*UpdateTeacherReply, error) {
	var out UpdateTeacherReply
	pattern := "/teaching/api/v1/teacher"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTeacherUpdateTeacher))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
