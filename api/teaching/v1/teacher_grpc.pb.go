// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: teaching/v1/teacher.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TeacherClient is the client API for Teacher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TeacherClient interface {
	SearchTeacher(ctx context.Context, in *SearchTeachersRequest, opts ...grpc.CallOption) (*SearchTeachersReply, error)
	GetTeacher(ctx context.Context, in *GetTeacherRequest, opts ...grpc.CallOption) (*GetTeacherReply, error)
	DeleteTeacher(ctx context.Context, in *DeleteTeacherRequest, opts ...grpc.CallOption) (*DeleteTeacherReply, error)
	UpdateTeacher(ctx context.Context, in *UpdateTeacherRequest, opts ...grpc.CallOption) (*UpdateTeacherReply, error)
	CreateTeacher(ctx context.Context, in *CreateTeacherRequest, opts ...grpc.CallOption) (*CreateTeacherReply, error)
}

type teacherClient struct {
	cc grpc.ClientConnInterface
}

func NewTeacherClient(cc grpc.ClientConnInterface) TeacherClient {
	return &teacherClient{cc}
}

func (c *teacherClient) SearchTeacher(ctx context.Context, in *SearchTeachersRequest, opts ...grpc.CallOption) (*SearchTeachersReply, error) {
	out := new(SearchTeachersReply)
	err := c.cc.Invoke(ctx, "/teaching.v1.Teacher/SearchTeacher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherClient) GetTeacher(ctx context.Context, in *GetTeacherRequest, opts ...grpc.CallOption) (*GetTeacherReply, error) {
	out := new(GetTeacherReply)
	err := c.cc.Invoke(ctx, "/teaching.v1.Teacher/GetTeacher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherClient) DeleteTeacher(ctx context.Context, in *DeleteTeacherRequest, opts ...grpc.CallOption) (*DeleteTeacherReply, error) {
	out := new(DeleteTeacherReply)
	err := c.cc.Invoke(ctx, "/teaching.v1.Teacher/DeleteTeacher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherClient) UpdateTeacher(ctx context.Context, in *UpdateTeacherRequest, opts ...grpc.CallOption) (*UpdateTeacherReply, error) {
	out := new(UpdateTeacherReply)
	err := c.cc.Invoke(ctx, "/teaching.v1.Teacher/UpdateTeacher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherClient) CreateTeacher(ctx context.Context, in *CreateTeacherRequest, opts ...grpc.CallOption) (*CreateTeacherReply, error) {
	out := new(CreateTeacherReply)
	err := c.cc.Invoke(ctx, "/teaching.v1.Teacher/CreateTeacher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeacherServer is the server API for Teacher service.
// All implementations must embed UnimplementedTeacherServer
// for forward compatibility
type TeacherServer interface {
	SearchTeacher(context.Context, *SearchTeachersRequest) (*SearchTeachersReply, error)
	GetTeacher(context.Context, *GetTeacherRequest) (*GetTeacherReply, error)
	DeleteTeacher(context.Context, *DeleteTeacherRequest) (*DeleteTeacherReply, error)
	UpdateTeacher(context.Context, *UpdateTeacherRequest) (*UpdateTeacherReply, error)
	CreateTeacher(context.Context, *CreateTeacherRequest) (*CreateTeacherReply, error)
	mustEmbedUnimplementedTeacherServer()
}

// UnimplementedTeacherServer must be embedded to have forward compatible implementations.
type UnimplementedTeacherServer struct {
}

func (UnimplementedTeacherServer) SearchTeacher(context.Context, *SearchTeachersRequest) (*SearchTeachersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTeacher not implemented")
}
func (UnimplementedTeacherServer) GetTeacher(context.Context, *GetTeacherRequest) (*GetTeacherReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeacher not implemented")
}
func (UnimplementedTeacherServer) DeleteTeacher(context.Context, *DeleteTeacherRequest) (*DeleteTeacherReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTeacher not implemented")
}
func (UnimplementedTeacherServer) UpdateTeacher(context.Context, *UpdateTeacherRequest) (*UpdateTeacherReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeacher not implemented")
}
func (UnimplementedTeacherServer) CreateTeacher(context.Context, *CreateTeacherRequest) (*CreateTeacherReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeacher not implemented")
}
func (UnimplementedTeacherServer) mustEmbedUnimplementedTeacherServer() {}

// UnsafeTeacherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeacherServer will
// result in compilation errors.
type UnsafeTeacherServer interface {
	mustEmbedUnimplementedTeacherServer()
}

func RegisterTeacherServer(s grpc.ServiceRegistrar, srv TeacherServer) {
	s.RegisterService(&Teacher_ServiceDesc, srv)
}

func _Teacher_SearchTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTeachersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServer).SearchTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teaching.v1.Teacher/SearchTeacher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServer).SearchTeacher(ctx, req.(*SearchTeachersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teacher_GetTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeacherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServer).GetTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teaching.v1.Teacher/GetTeacher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServer).GetTeacher(ctx, req.(*GetTeacherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teacher_DeleteTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTeacherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServer).DeleteTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teaching.v1.Teacher/DeleteTeacher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServer).DeleteTeacher(ctx, req.(*DeleteTeacherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teacher_UpdateTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTeacherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServer).UpdateTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teaching.v1.Teacher/UpdateTeacher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServer).UpdateTeacher(ctx, req.(*UpdateTeacherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teacher_CreateTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeacherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServer).CreateTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teaching.v1.Teacher/CreateTeacher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServer).CreateTeacher(ctx, req.(*CreateTeacherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Teacher_ServiceDesc is the grpc.ServiceDesc for Teacher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Teacher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teaching.v1.Teacher",
	HandlerType: (*TeacherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchTeacher",
			Handler:    _Teacher_SearchTeacher_Handler,
		},
		{
			MethodName: "GetTeacher",
			Handler:    _Teacher_GetTeacher_Handler,
		},
		{
			MethodName: "DeleteTeacher",
			Handler:    _Teacher_DeleteTeacher_Handler,
		},
		{
			MethodName: "UpdateTeacher",
			Handler:    _Teacher_UpdateTeacher_Handler,
		},
		{
			MethodName: "CreateTeacher",
			Handler:    _Teacher_CreateTeacher_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teaching/v1/teacher.proto",
}
