// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.0
// - protoc             v3.18.1
// source: teaching/v1/course.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCourseCreateCourse = "/teaching.v1.Course/CreateCourse"
const OperationCourseSearchCourse = "/teaching.v1.Course/SearchCourse"

type CourseHTTPServer interface {
	CreateCourse(context.Context, *CreateCourseRequest) (*CreateCourseReply, error)
	SearchCourse(context.Context, *SearchCourseRequest) (*SearchCourseReply, error)
}

func RegisterCourseHTTPServer(s *http.Server, srv CourseHTTPServer) {
	r := s.Route("/")
	r.GET("/teaching/api/v1/courses", _Course_SearchCourse0_HTTP_Handler(srv))
	r.POST("/teaching/api/v1/course", _Course_CreateCourse0_HTTP_Handler(srv))
}

func _Course_SearchCourse0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchCourseRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseSearchCourse)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SearchCourse(ctx, req.(*SearchCourseRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchCourseReply)
		return ctx.Result(200, reply)
	}
}

func _Course_CreateCourse0_HTTP_Handler(srv CourseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateCourseRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCourseCreateCourse)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCourse(ctx, req.(*CreateCourseRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateCourseReply)
		return ctx.Result(200, reply)
	}
}

type CourseHTTPClient interface {
	CreateCourse(ctx context.Context, req *CreateCourseRequest, opts ...http.CallOption) (rsp *CreateCourseReply, err error)
	SearchCourse(ctx context.Context, req *SearchCourseRequest, opts ...http.CallOption) (rsp *SearchCourseReply, err error)
}

type CourseHTTPClientImpl struct {
	cc *http.Client
}

func NewCourseHTTPClient(client *http.Client) CourseHTTPClient {
	return &CourseHTTPClientImpl{client}
}

func (c *CourseHTTPClientImpl) CreateCourse(ctx context.Context, in *CreateCourseRequest, opts ...http.CallOption) (*CreateCourseReply, error) {
	var out CreateCourseReply
	pattern := "/teaching/api/v1/course"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCourseCreateCourse))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CourseHTTPClientImpl) SearchCourse(ctx context.Context, in *SearchCourseRequest, opts ...http.CallOption) (*SearchCourseReply, error) {
	var out SearchCourseReply
	pattern := "/teaching/api/v1/courses"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCourseSearchCourse))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
